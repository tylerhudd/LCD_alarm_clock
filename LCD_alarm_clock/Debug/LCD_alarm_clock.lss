
LCD_alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00001194  00001228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008001ac  008001ac  000012d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013e6  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000861  00000000  00000000  000027ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4c  00000000  00000000  0000304f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00003a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  00003c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000898  00000000  00000000  00004197  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004a2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e9       	ldi	r30, 0x94	; 148
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3a       	cpi	r26, 0xAC	; 172
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac ea       	ldi	r26, 0xAC	; 172
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 3c       	cpi	r26, 0xC8	; 200
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <main>
      9e:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_cmd>:
	lcd_cmd(0X80);
}

void lcd_cmd(char cmd_out)
{
	data=cmd_out;
      a6:	85 b9       	out	0x05, r24	; 5
	PORTD=(0<<rs)|(0<<rw)|(1<<en);
      a8:	84 e0       	ldi	r24, 0x04	; 4
      aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ac:	8f e1       	ldi	r24, 0x1F	; 31
      ae:	9e e4       	ldi	r25, 0x4E	; 78
      b0:	01 97       	sbiw	r24, 0x01	; 1
      b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_cmd+0xa>
      b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_cmd+0x10>
      b6:	00 00       	nop
	_delay_ms(10);
	PORTD=(0<<rs)|(0<<rw)|(0<<en);
      b8:	1b b8       	out	0x0b, r1	; 11
      ba:	8f e1       	ldi	r24, 0x1F	; 31
      bc:	9e e4       	ldi	r25, 0x4E	; 78
      be:	01 97       	sbiw	r24, 0x01	; 1
      c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_cmd+0x18>
      c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_cmd+0x1e>
      c4:	00 00       	nop
      c6:	08 95       	ret

000000c8 <lcd_init>:
	}
}

void lcd_init()
{
	lcd_cmd(0X38);
      c8:	88 e3       	ldi	r24, 0x38	; 56
      ca:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
	lcd_cmd(0X0E);
      ce:	8e e0       	ldi	r24, 0x0E	; 14
      d0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
	lcd_cmd(0X01);
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
	lcd_cmd(0X80);
      da:	80 e8       	ldi	r24, 0x80	; 128
      dc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
      e0:	08 95       	ret

000000e2 <lcd_data>:
	_delay_ms(10);
}

void lcd_data(char data_out)
{
	data=data_out;
      e2:	85 b9       	out	0x05, r24	; 5
	PORTD=(1<<rs)|(0<<rw)|(1<<en);
      e4:	85 e0       	ldi	r24, 0x05	; 5
      e6:	8b b9       	out	0x0b, r24	; 11
      e8:	8f e1       	ldi	r24, 0x1F	; 31
      ea:	9e e4       	ldi	r25, 0x4E	; 78
      ec:	01 97       	sbiw	r24, 0x01	; 1
      ee:	f1 f7       	brne	.-4      	; 0xec <lcd_data+0xa>
      f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd_data+0x10>
      f2:	00 00       	nop
	_delay_ms(10);
	PORTD=(1<<rs)|(0<<rw)|(0<<en);
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	8b b9       	out	0x0b, r24	; 11
      f8:	8f e1       	ldi	r24, 0x1F	; 31
      fa:	9e e4       	ldi	r25, 0x4E	; 78
      fc:	01 97       	sbiw	r24, 0x01	; 1
      fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0x1a>
     100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_data+0x20>
     102:	00 00       	nop
     104:	08 95       	ret

00000106 <lcd_str>:
	_delay_ms(10);
}

void lcd_str(char *str)
{
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	ec 01       	movw	r28, r24
	unsigned int i=0;
	while(str[i]!='\0')
     10c:	88 81       	ld	r24, Y
     10e:	88 23       	and	r24, r24
     110:	31 f0       	breq	.+12     	; 0x11e <lcd_str+0x18>
     112:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_data(str[i]);
     114:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
}

void lcd_str(char *str)
{
	unsigned int i=0;
	while(str[i]!='\0')
     118:	89 91       	ld	r24, Y+
     11a:	81 11       	cpse	r24, r1
     11c:	fb cf       	rjmp	.-10     	; 0x114 <lcd_str+0xe>
	{
		lcd_data(str[i]);
		i++;
	}
}
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <displayMenuOption>:

void displayMenuOption(int stateSel)
{
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	8c 01       	movw	r16, r24
	// clear bottom row
	lcd_cmd(0xC0);
     12e:	80 ec       	ldi	r24, 0xC0	; 192
     130:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
     134:	c0 e1       	ldi	r28, 0x10	; 16
     136:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0; i < 16; i++) lcd_data(' ');
     138:	80 e2       	ldi	r24, 0x20	; 32
     13a:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
     13e:	21 97       	sbiw	r28, 0x01	; 1
     140:	d9 f7       	brne	.-10     	; 0x138 <displayMenuOption+0x14>
	lcd_cmd(0xC0);
     142:	80 ec       	ldi	r24, 0xC0	; 192
     144:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
	
	switch(stateSel)
     148:	02 30       	cpi	r16, 0x02	; 2
     14a:	11 05       	cpc	r17, r1
     14c:	c9 f0       	breq	.+50     	; 0x180 <displayMenuOption+0x5c>
     14e:	3c f4       	brge	.+14     	; 0x15e <displayMenuOption+0x3a>
     150:	01 15       	cp	r16, r1
     152:	11 05       	cpc	r17, r1
     154:	59 f0       	breq	.+22     	; 0x16c <displayMenuOption+0x48>
     156:	01 30       	cpi	r16, 0x01	; 1
     158:	11 05       	cpc	r17, r1
     15a:	69 f0       	breq	.+26     	; 0x176 <displayMenuOption+0x52>
     15c:	1f c0       	rjmp	.+62     	; 0x19c <displayMenuOption+0x78>
     15e:	03 30       	cpi	r16, 0x03	; 3
     160:	11 05       	cpc	r17, r1
     162:	99 f0       	breq	.+38     	; 0x18a <displayMenuOption+0x66>
     164:	04 30       	cpi	r16, 0x04	; 4
     166:	11 05       	cpc	r17, r1
     168:	a9 f0       	breq	.+42     	; 0x194 <displayMenuOption+0x70>
     16a:	18 c0       	rjmp	.+48     	; 0x19c <displayMenuOption+0x78>
	{
		case 0 :
			lcd_str("MCU Clock-GG&TH");
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	91 e0       	ldi	r25, 0x01	; 1
     170:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
		break;
     174:	13 c0       	rjmp	.+38     	; 0x19c <displayMenuOption+0x78>
		case 1 :
			lcd_str("-> Clock Set");
     176:	80 e1       	ldi	r24, 0x10	; 16
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
		break;
     17e:	0e c0       	rjmp	.+28     	; 0x19c <displayMenuOption+0x78>
		case 2 :
			lcd_str("-> Alarm Set");
     180:	8d e1       	ldi	r24, 0x1D	; 29
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
		break;
     188:	09 c0       	rjmp	.+18     	; 0x19c <displayMenuOption+0x78>
		case 3 :
			lcd_str("-> Stopwatch");
     18a:	8a e2       	ldi	r24, 0x2A	; 42
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
		break;
     192:	04 c0       	rjmp	.+8      	; 0x19c <displayMenuOption+0x78>
		case 4 :
			lcd_str("-> Timer");
     194:	87 e3       	ldi	r24, 0x37	; 55
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
		break;
	}
}
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
     1a4:	08 95       	ret

000001a6 <printClock>:

void printClock(int CorA)
{
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <printClock+0x8>
     1ae:	00 d0       	rcall	.+0      	; 0x1b0 <printClock+0xa>
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
	char hrChar[2];
	char minChar[2];
	char ampmChar = 'A';
	
	switch(CorA)
     1b4:	00 97       	sbiw	r24, 0x00	; 0
     1b6:	21 f0       	breq	.+8      	; 0x1c0 <printClock+0x1a>
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	09 f4       	brne	.+2      	; 0x1be <printClock+0x18>
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <printClock+0xdc>
     1be:	c1 c0       	rjmp	.+386    	; 0x342 <printClock+0x19c>
	{
		case 0:	// for clock
			if(hr<10) sprintf(hrChar, "0%i", hr);
     1c0:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <hr>
     1c4:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <hr+0x1>
     1c8:	8a 30       	cpi	r24, 0x0A	; 10
     1ca:	91 05       	cpc	r25, r1
     1cc:	9c f4       	brge	.+38     	; 0x1f4 <printClock+0x4e>
     1ce:	9f 93       	push	r25
     1d0:	8f 93       	push	r24
     1d2:	80 e4       	ldi	r24, 0x40	; 64
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	9f 93       	push	r25
     1d8:	8f 93       	push	r24
     1da:	ce 01       	movw	r24, r28
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	9f 93       	push	r25
     1e0:	8f 93       	push	r24
     1e2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <sprintf>
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	12 c0       	rjmp	.+36     	; 0x218 <printClock+0x72>
			else sprintf(hrChar, "%i", hr);
     1f4:	9f 93       	push	r25
     1f6:	8f 93       	push	r24
     1f8:	81 e4       	ldi	r24, 0x41	; 65
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	9f 93       	push	r25
     1fe:	8f 93       	push	r24
     200:	ce 01       	movw	r24, r28
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	9f 93       	push	r25
     206:	8f 93       	push	r24
     208:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <sprintf>
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	0f 90       	pop	r0
     216:	0f 90       	pop	r0
			
			if(min<10) sprintf(minChar, "0%i", min);
     218:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <min>
     21c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <min+0x1>
     220:	8a 30       	cpi	r24, 0x0A	; 10
     222:	91 05       	cpc	r25, r1
     224:	9c f4       	brge	.+38     	; 0x24c <printClock+0xa6>
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	80 e4       	ldi	r24, 0x40	; 64
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	9f 93       	push	r25
     230:	8f 93       	push	r24
     232:	ce 01       	movw	r24, r28
     234:	03 96       	adiw	r24, 0x03	; 3
     236:	9f 93       	push	r25
     238:	8f 93       	push	r24
     23a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <sprintf>
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	12 c0       	rjmp	.+36     	; 0x270 <printClock+0xca>
			else sprintf(minChar, "%i", min);
     24c:	9f 93       	push	r25
     24e:	8f 93       	push	r24
     250:	81 e4       	ldi	r24, 0x41	; 65
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	9f 93       	push	r25
     256:	8f 93       	push	r24
     258:	ce 01       	movw	r24, r28
     25a:	03 96       	adiw	r24, 0x03	; 3
     25c:	9f 93       	push	r25
     25e:	8f 93       	push	r24
     260:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <sprintf>
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
			
			if (ampm == 1) ampmChar = 'P';
     270:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ampm>
     274:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ampm+0x1>
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	09 f0       	breq	.+2      	; 0x27e <printClock+0xd8>
     27c:	64 c0       	rjmp	.+200    	; 0x346 <printClock+0x1a0>
     27e:	10 e5       	ldi	r17, 0x50	; 80
     280:	65 c0       	rjmp	.+202    	; 0x34c <printClock+0x1a6>
			break;
		case 1: // for alarm
			if(alarmHr<10) sprintf(hrChar, "0%i", alarmHr);
     282:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <alarmHr>
     286:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <alarmHr+0x1>
     28a:	8a 30       	cpi	r24, 0x0A	; 10
     28c:	91 05       	cpc	r25, r1
     28e:	9c f4       	brge	.+38     	; 0x2b6 <printClock+0x110>
     290:	9f 93       	push	r25
     292:	8f 93       	push	r24
     294:	80 e4       	ldi	r24, 0x40	; 64
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	9f 93       	push	r25
     29a:	8f 93       	push	r24
     29c:	ce 01       	movw	r24, r28
     29e:	01 96       	adiw	r24, 0x01	; 1
     2a0:	9f 93       	push	r25
     2a2:	8f 93       	push	r24
     2a4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <sprintf>
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	12 c0       	rjmp	.+36     	; 0x2da <printClock+0x134>
			else sprintf(hrChar, "%i", alarmHr);
     2b6:	9f 93       	push	r25
     2b8:	8f 93       	push	r24
     2ba:	81 e4       	ldi	r24, 0x41	; 65
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	9f 93       	push	r25
     2c0:	8f 93       	push	r24
     2c2:	ce 01       	movw	r24, r28
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	9f 93       	push	r25
     2c8:	8f 93       	push	r24
     2ca:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <sprintf>
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
			
			if(alarmMin<10) sprintf(minChar, "0%i", alarmMin);
     2da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <alarmMin>
     2de:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <alarmMin+0x1>
     2e2:	8a 30       	cpi	r24, 0x0A	; 10
     2e4:	91 05       	cpc	r25, r1
     2e6:	9c f4       	brge	.+38     	; 0x30e <printClock+0x168>
     2e8:	9f 93       	push	r25
     2ea:	8f 93       	push	r24
     2ec:	80 e4       	ldi	r24, 0x40	; 64
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	9f 93       	push	r25
     2f2:	8f 93       	push	r24
     2f4:	ce 01       	movw	r24, r28
     2f6:	03 96       	adiw	r24, 0x03	; 3
     2f8:	9f 93       	push	r25
     2fa:	8f 93       	push	r24
     2fc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <sprintf>
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	12 c0       	rjmp	.+36     	; 0x332 <printClock+0x18c>
			else sprintf(minChar, "%i", alarmMin);
     30e:	9f 93       	push	r25
     310:	8f 93       	push	r24
     312:	81 e4       	ldi	r24, 0x41	; 65
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	9f 93       	push	r25
     318:	8f 93       	push	r24
     31a:	ce 01       	movw	r24, r28
     31c:	03 96       	adiw	r24, 0x03	; 3
     31e:	9f 93       	push	r25
     320:	8f 93       	push	r24
     322:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <sprintf>
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
			
			if (alarmAmpm == 1) ampmChar = 'P';
     332:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <alarmAmpm>
     336:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <alarmAmpm+0x1>
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	31 f4       	brne	.+12     	; 0x34a <printClock+0x1a4>
     33e:	10 e5       	ldi	r17, 0x50	; 80
     340:	05 c0       	rjmp	.+10     	; 0x34c <printClock+0x1a6>

void printClock(int CorA)
{
	char hrChar[2];
	char minChar[2];
	char ampmChar = 'A';
     342:	11 e4       	ldi	r17, 0x41	; 65
     344:	03 c0       	rjmp	.+6      	; 0x34c <printClock+0x1a6>
     346:	11 e4       	ldi	r17, 0x41	; 65
     348:	01 c0       	rjmp	.+2      	; 0x34c <printClock+0x1a6>
     34a:	11 e4       	ldi	r17, 0x41	; 65
			
			if (alarmAmpm == 1) ampmChar = 'P';
			break;
	}
	
	lcd_data(hrChar[0]);
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
	lcd_data(hrChar[1]);
     352:	8a 81       	ldd	r24, Y+2	; 0x02
     354:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
	lcd_str(":");
     358:	84 e4       	ldi	r24, 0x44	; 68
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
	lcd_str(minChar);
     360:	ce 01       	movw	r24, r28
     362:	03 96       	adiw	r24, 0x03	; 3
     364:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
	lcd_data(ampmChar);
     368:	81 2f       	mov	r24, r17
     36a:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
	lcd_data('M');
     36e:	8d e4       	ldi	r24, 0x4D	; 77
     370:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
	// for(int i=0; i<7; i++) lcd_str(" ");
}
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	08 95       	ret

00000384 <incHr>:

void incHr(int CorA)
{
	switch(CorA)
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	19 f0       	breq	.+6      	; 0x38e <incHr+0xa>
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	a9 f0       	breq	.+42     	; 0x3b6 <incHr+0x32>
     38c:	08 95       	ret
	{
		case 0:	// for clock
			if(hr == 12) hr = 1;
     38e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <hr>
     392:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <hr+0x1>
     396:	8c 30       	cpi	r24, 0x0C	; 12
     398:	91 05       	cpc	r25, r1
     39a:	39 f4       	brne	.+14     	; 0x3aa <incHr+0x26>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <hr+0x1>
     3a4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <hr>
     3a8:	08 95       	ret
			else hr++;
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <hr+0x1>
     3b0:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <hr>
     3b4:	08 95       	ret
			break;
		case 1:	// for alarm
			if(alarmHr == 12) alarmHr = 1;
     3b6:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <alarmHr>
     3ba:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <alarmHr+0x1>
     3be:	8c 30       	cpi	r24, 0x0C	; 12
     3c0:	91 05       	cpc	r25, r1
     3c2:	39 f4       	brne	.+14     	; 0x3d2 <incHr+0x4e>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <alarmHr+0x1>
     3cc:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <alarmHr>
     3d0:	08 95       	ret
			else alarmHr++;
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <alarmHr+0x1>
     3d8:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <alarmHr>
     3dc:	08 95       	ret

000003de <decHr>:
	}
}

void decHr(int CorA)
{
	switch(CorA)
     3de:	00 97       	sbiw	r24, 0x00	; 0
     3e0:	19 f0       	breq	.+6      	; 0x3e8 <decHr+0xa>
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	a9 f0       	breq	.+42     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3e6:	08 95       	ret
	{
		case 0:	// for clock
			if(hr == 1) hr = 12;
     3e8:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <hr>
     3ec:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <hr+0x1>
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	91 05       	cpc	r25, r1
     3f4:	39 f4       	brne	.+14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3f6:	8c e0       	ldi	r24, 0x0C	; 12
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <hr+0x1>
     3fe:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <hr>
     402:	08 95       	ret
			else hr--;
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <hr+0x1>
     40a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <hr>
     40e:	08 95       	ret
			break;
		case 1:	// for alarm
			if(alarmHr == 1) alarmHr = 12;
     410:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <alarmHr>
     414:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <alarmHr+0x1>
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	91 05       	cpc	r25, r1
     41c:	39 f4       	brne	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     41e:	8c e0       	ldi	r24, 0x0C	; 12
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <alarmHr+0x1>
     426:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <alarmHr>
     42a:	08 95       	ret
			else alarmHr--;
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <alarmHr+0x1>
     432:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <alarmHr>
     436:	08 95       	ret

00000438 <incMin>:
	}
}

void incMin(int CorAorT, int set)
{
	switch(CorAorT)
     438:	81 30       	cpi	r24, 0x01	; 1
     43a:	91 05       	cpc	r25, r1
     43c:	e9 f0       	breq	.+58     	; 0x478 <incMin+0x40>
     43e:	82 30       	cpi	r24, 0x02	; 2
     440:	91 05       	cpc	r25, r1
     442:	61 f1       	breq	.+88     	; 0x49c <incMin+0x64>
     444:	89 2b       	or	r24, r25
     446:	b1 f5       	brne	.+108    	; 0x4b4 <incMin+0x7c>
	{
		case 0: // for clock
			if(min == 59)
     448:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <min>
     44c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <min+0x1>
     450:	8b 33       	cpi	r24, 0x3B	; 59
     452:	91 05       	cpc	r25, r1
     454:	59 f4       	brne	.+22     	; 0x46c <incMin+0x34>
			{
				min = 0;
     456:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <min+0x1>
     45a:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <min>
				if(set == 0) incHr(0);
     45e:	67 2b       	or	r22, r23
     460:	49 f5       	brne	.+82     	; 0x4b4 <incMin+0x7c>
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 c2 01 	call	0x384	; 0x384 <incHr>
     46a:	08 95       	ret
			}
			else min++;
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <min+0x1>
     472:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <min>
     476:	08 95       	ret
			break;
		case 1:	// for alarm
			if(alarmMin == 59) alarmMin = 0;
     478:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <alarmMin>
     47c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <alarmMin+0x1>
     480:	8b 33       	cpi	r24, 0x3B	; 59
     482:	91 05       	cpc	r25, r1
     484:	29 f4       	brne	.+10     	; 0x490 <incMin+0x58>
     486:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <alarmMin+0x1>
     48a:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <alarmMin>
     48e:	08 95       	ret
			else alarmMin ++;
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <alarmMin+0x1>
     496:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <alarmMin>
     49a:	08 95       	ret
			break;
		case 2:	// for timer
			if (timerMin < 60) timerMin++;	// 1 hour max for timer
     49c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <timerMin>
     4a0:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <timerMin+0x1>
     4a4:	8c 33       	cpi	r24, 0x3C	; 60
     4a6:	91 05       	cpc	r25, r1
     4a8:	2c f4       	brge	.+10     	; 0x4b4 <incMin+0x7c>
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <timerMin+0x1>
     4b0:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <timerMin>
     4b4:	08 95       	ret

000004b6 <decMin>:
	}
}

void decMin(int CorAorT)
{
	switch(CorAorT)
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	91 05       	cpc	r25, r1
     4ba:	c1 f0       	breq	.+48     	; 0x4ec <decMin+0x36>
     4bc:	82 30       	cpi	r24, 0x02	; 2
     4be:	91 05       	cpc	r25, r1
     4c0:	41 f1       	breq	.+80     	; 0x512 <decMin+0x5c>
     4c2:	89 2b       	or	r24, r25
     4c4:	91 f5       	brne	.+100    	; 0x52a <decMin+0x74>
	{
		case 0:	// for clock
			if(min == 0) min = 59;
     4c6:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <min>
     4ca:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <min+0x1>
     4ce:	00 97       	sbiw	r24, 0x00	; 0
     4d0:	39 f4       	brne	.+14     	; 0x4e0 <decMin+0x2a>
     4d2:	8b e3       	ldi	r24, 0x3B	; 59
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <min+0x1>
     4da:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <min>
     4de:	08 95       	ret
			else min --;
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <min+0x1>
     4e6:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <min>
     4ea:	08 95       	ret
			break;
		case 1:	// for alarm
			if(alarmMin == 0) alarmMin = 59;
     4ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <alarmMin>
     4f0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <alarmMin+0x1>
     4f4:	00 97       	sbiw	r24, 0x00	; 0
     4f6:	39 f4       	brne	.+14     	; 0x506 <decMin+0x50>
     4f8:	8b e3       	ldi	r24, 0x3B	; 59
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <alarmMin+0x1>
     500:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <alarmMin>
     504:	08 95       	ret
			else alarmMin --;
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <alarmMin+0x1>
     50c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <alarmMin>
     510:	08 95       	ret
			break;
		case 2:	// for timer
			if (timerMin > 0) timerMin--;
     512:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <timerMin>
     516:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <timerMin+0x1>
     51a:	18 16       	cp	r1, r24
     51c:	19 06       	cpc	r1, r25
     51e:	2c f4       	brge	.+10     	; 0x52a <decMin+0x74>
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <timerMin+0x1>
     526:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <timerMin>
     52a:	08 95       	ret

0000052c <incSec>:
	}
}

void incSec()
{
	if(sec==59)
     52c:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <sec>
     530:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <sec+0x1>
     534:	8b 33       	cpi	r24, 0x3B	; 59
     536:	91 05       	cpc	r25, r1
     538:	59 f4       	brne	.+22     	; 0x550 <incSec+0x24>
	{
		sec = 0;
     53a:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <sec+0x1>
     53e:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <sec>
		incMin(0,0);
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 1c 02 	call	0x438	; 0x438 <incMin>
     54e:	05 c0       	rjmp	.+10     	; 0x55a <incSec+0x2e>
	}
	else sec++;
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <sec+0x1>
     556:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <sec>
	if(SWrun) swSec++;
     55a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <SWrun>
     55e:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <SWrun+0x1>
     562:	89 2b       	or	r24, r25
     564:	49 f0       	breq	.+18     	; 0x578 <incSec+0x4c>
     566:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
     56a:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <__data_end+0x1>
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <__data_end+0x1>
     574:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
     578:	08 95       	ret

0000057a <__vector_11>:
int runTimer;
int swSec;
int SWrun;

ISR(TIMER1_COMPA_vect)
{
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	2f 93       	push	r18
     586:	3f 93       	push	r19
     588:	4f 93       	push	r20
     58a:	5f 93       	push	r21
     58c:	6f 93       	push	r22
     58e:	7f 93       	push	r23
     590:	8f 93       	push	r24
     592:	9f 93       	push	r25
     594:	af 93       	push	r26
     596:	bf 93       	push	r27
     598:	ef 93       	push	r30
     59a:	ff 93       	push	r31
	incSec();
     59c:	0e 94 96 02 	call	0x52c	; 0x52c <incSec>
}
     5a0:	ff 91       	pop	r31
     5a2:	ef 91       	pop	r30
     5a4:	bf 91       	pop	r27
     5a6:	af 91       	pop	r26
     5a8:	9f 91       	pop	r25
     5aa:	8f 91       	pop	r24
     5ac:	7f 91       	pop	r23
     5ae:	6f 91       	pop	r22
     5b0:	5f 91       	pop	r21
     5b2:	4f 91       	pop	r20
     5b4:	3f 91       	pop	r19
     5b6:	2f 91       	pop	r18
     5b8:	0f 90       	pop	r0
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	0f 90       	pop	r0
     5be:	1f 90       	pop	r1
     5c0:	18 95       	reti

000005c2 <toggleAMPM>:
	if(SWrun) swSec++;
}

void toggleAMPM(int CorA)
{
	switch(CorA)
     5c2:	00 97       	sbiw	r24, 0x00	; 0
     5c4:	19 f0       	breq	.+6      	; 0x5cc <toggleAMPM+0xa>
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	99 f0       	breq	.+38     	; 0x5f0 <toggleAMPM+0x2e>
     5ca:	08 95       	ret
	{
		case 0:	// for clock
			if(ampm == 0) ampm = 1;
     5cc:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ampm>
     5d0:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ampm+0x1>
     5d4:	89 2b       	or	r24, r25
     5d6:	39 f4       	brne	.+14     	; 0x5e6 <toggleAMPM+0x24>
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <ampm+0x1>
     5e0:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <ampm>
     5e4:	08 95       	ret
			else ampm = 0;
     5e6:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <ampm+0x1>
     5ea:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <ampm>
     5ee:	08 95       	ret
			break;
		case 1:	// for alarm
			if(alarmAmpm == 0) alarmAmpm = 1;
     5f0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <alarmAmpm>
     5f4:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <alarmAmpm+0x1>
     5f8:	89 2b       	or	r24, r25
     5fa:	39 f4       	brne	.+14     	; 0x60a <toggleAMPM+0x48>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <alarmAmpm+0x1>
     604:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <alarmAmpm>
     608:	08 95       	ret
			else alarmAmpm = 0;
     60a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <alarmAmpm+0x1>
     60e:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <alarmAmpm>
     612:	08 95       	ret

00000614 <setTime>:
			break;
	}
}

int setTime(int CorA, int setState)
{
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	8c 01       	movw	r16, r24
     61e:	eb 01       	movw	r28, r22
	lcd_cmd(0xC0);	// set position [2,1]
     620:	80 ec       	ldi	r24, 0xC0	; 192
     622:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
	printClock(CorA);
     626:	c8 01       	movw	r24, r16
     628:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <printClock>
	if((PINC & 0x02) == 0x02)	// if increment button pressed
     62c:	31 9b       	sbis	0x06, 1	; 6
     62e:	1c c0       	rjmp	.+56     	; 0x668 <setTime+0x54>
	{
		switch(setState)
     630:	c1 30       	cpi	r28, 0x01	; 1
     632:	d1 05       	cpc	r29, r1
     634:	59 f0       	breq	.+22     	; 0x64c <setTime+0x38>
     636:	c2 30       	cpi	r28, 0x02	; 2
     638:	d1 05       	cpc	r29, r1
     63a:	81 f0       	breq	.+32     	; 0x65c <setTime+0x48>
     63c:	20 97       	sbiw	r28, 0x00	; 0
     63e:	a1 f4       	brne	.+40     	; 0x668 <setTime+0x54>
		{
			case 0:	// set hours
				incHr(CorA);
     640:	c8 01       	movw	r24, r16
     642:	0e 94 c2 01 	call	0x384	; 0x384 <incHr>
			case 2: // set AM/PM
				toggleAMPM(CorA);
				break;
		}
	}
	if((PINC & 0x04) == 0x04)	// if decrement button pressed
     646:	32 99       	sbic	0x06, 2	; 6
     648:	19 c0       	rjmp	.+50     	; 0x67c <setTime+0x68>
     64a:	6e c0       	rjmp	.+220    	; 0x728 <setTime+0x114>
		{
			case 0:	// set hours
				incHr(CorA);
				break;
			case 1:	// set mins
				incMin(CorA, 1);
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	c8 01       	movw	r24, r16
     652:	0e 94 1c 02 	call	0x438	; 0x438 <incMin>
			case 2: // set AM/PM
				toggleAMPM(CorA);
				break;
		}
	}
	if((PINC & 0x04) == 0x04)	// if decrement button pressed
     656:	32 99       	sbic	0x06, 2	; 6
     658:	17 c0       	rjmp	.+46     	; 0x688 <setTime+0x74>
     65a:	6c c0       	rjmp	.+216    	; 0x734 <setTime+0x120>
				break;
			case 1:	// set mins
				incMin(CorA, 1);
				break;
			case 2: // set AM/PM
				toggleAMPM(CorA);
     65c:	c8 01       	movw	r24, r16
     65e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <toggleAMPM>
				break;
		}
	}
	if((PINC & 0x04) == 0x04)	// if decrement button pressed
     662:	32 99       	sbic	0x06, 2	; 6
     664:	17 c0       	rjmp	.+46     	; 0x694 <setTime+0x80>
     666:	63 c0       	rjmp	.+198    	; 0x72e <setTime+0x11a>
     668:	32 9b       	sbis	0x06, 2	; 6
     66a:	1a c0       	rjmp	.+52     	; 0x6a0 <setTime+0x8c>
	{
		switch(setState)
     66c:	c1 30       	cpi	r28, 0x01	; 1
     66e:	d1 05       	cpc	r29, r1
     670:	59 f0       	breq	.+22     	; 0x688 <setTime+0x74>
     672:	c2 30       	cpi	r28, 0x02	; 2
     674:	d1 05       	cpc	r29, r1
     676:	71 f0       	breq	.+28     	; 0x694 <setTime+0x80>
     678:	20 97       	sbiw	r28, 0x00	; 0
     67a:	91 f4       	brne	.+36     	; 0x6a0 <setTime+0x8c>
		{
			case 0:	// set hours
				decHr(CorA);
     67c:	c8 01       	movw	r24, r16
     67e:	0e 94 ef 01 	call	0x3de	; 0x3de <decHr>
			case 2: // set AM/PM
				toggleAMPM(CorA);
				break;
		}
	}
	if((PINC & 0x01) == 0x01)	// if enter button pressed
     682:	30 99       	sbic	0x06, 0	; 6
     684:	17 c0       	rjmp	.+46     	; 0x6b4 <setTime+0xa0>
     686:	58 c0       	rjmp	.+176    	; 0x738 <setTime+0x124>
		{
			case 0:	// set hours
				decHr(CorA);
				break;
			case 1:	// set mins
				decMin(CorA);
     688:	c8 01       	movw	r24, r16
     68a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <decMin>
			case 2: // set AM/PM
				toggleAMPM(CorA);
				break;
		}
	}
	if((PINC & 0x01) == 0x01)	// if enter button pressed
     68e:	30 99       	sbic	0x06, 0	; 6
     690:	29 c0       	rjmp	.+82     	; 0x6e4 <setTime+0xd0>
     692:	52 c0       	rjmp	.+164    	; 0x738 <setTime+0x124>
				break;
			case 1:	// set mins
				decMin(CorA);
				break;
			case 2: // set AM/PM
				toggleAMPM(CorA);
     694:	c8 01       	movw	r24, r16
     696:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <toggleAMPM>
				break;
		}
	}
	if((PINC & 0x01) == 0x01)	// if enter button pressed
     69a:	30 99       	sbic	0x06, 0	; 6
     69c:	3b c0       	rjmp	.+118    	; 0x714 <setTime+0x100>
     69e:	4c c0       	rjmp	.+152    	; 0x738 <setTime+0x124>
     6a0:	30 9b       	sbis	0x06, 0	; 6
     6a2:	4a c0       	rjmp	.+148    	; 0x738 <setTime+0x124>
	{
		switch(setState)
     6a4:	c1 30       	cpi	r28, 0x01	; 1
     6a6:	d1 05       	cpc	r29, r1
     6a8:	e9 f0       	breq	.+58     	; 0x6e4 <setTime+0xd0>
     6aa:	c2 30       	cpi	r28, 0x02	; 2
     6ac:	d1 05       	cpc	r29, r1
     6ae:	91 f1       	breq	.+100    	; 0x714 <setTime+0x100>
     6b0:	cd 2b       	or	r28, r29
     6b2:	99 f5       	brne	.+102    	; 0x71a <setTime+0x106>
		{
			case 0:
				lcd_cmd(0x01);
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
				lcd_cmd(0x80);
     6ba:	80 e8       	ldi	r24, 0x80	; 128
     6bc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
				if(!CorA) lcd_str("Clock: ");
     6c0:	01 2b       	or	r16, r17
     6c2:	29 f4       	brne	.+10     	; 0x6ce <setTime+0xba>
     6c4:	86 e4       	ldi	r24, 0x46	; 70
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <setTime+0xc2>
				else lcd_str("Alarm: ");
     6ce:	8e e4       	ldi	r24, 0x4E	; 78
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
				lcd_str("set mins");
     6d6:	86 e5       	ldi	r24, 0x56	; 86
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
				setState ++;
     6de:	c1 e0       	ldi	r28, 0x01	; 1
     6e0:	d0 e0       	ldi	r29, 0x00	; 0
				break;
     6e2:	2a c0       	rjmp	.+84     	; 0x738 <setTime+0x124>
			case 1:
				lcd_cmd(0x01);
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
				lcd_cmd(0x80);
     6ea:	80 e8       	ldi	r24, 0x80	; 128
     6ec:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
				if(!CorA) lcd_str("Clock: ");
     6f0:	01 2b       	or	r16, r17
     6f2:	29 f4       	brne	.+10     	; 0x6fe <setTime+0xea>
     6f4:	86 e4       	ldi	r24, 0x46	; 70
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <setTime+0xf2>
				else lcd_str("Alarm: ");
     6fe:	8e e4       	ldi	r24, 0x4E	; 78
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
				lcd_str("set AM/PM");
     706:	8f e5       	ldi	r24, 0x5F	; 95
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
				setState ++;
     70e:	c2 e0       	ldi	r28, 0x02	; 2
     710:	d0 e0       	ldi	r29, 0x00	; 0
				break;
     712:	12 c0       	rjmp	.+36     	; 0x738 <setTime+0x124>
			case 2:
				setState ++;
     714:	c3 e0       	ldi	r28, 0x03	; 3
     716:	d0 e0       	ldi	r29, 0x00	; 0
				break;
     718:	0f c0       	rjmp	.+30     	; 0x738 <setTime+0x124>
			default:
				state = 0;
     71a:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <state+0x1>
     71e:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
				setState = 0;
     722:	c0 e0       	ldi	r28, 0x00	; 0
     724:	d0 e0       	ldi	r29, 0x00	; 0
				break;
     726:	08 c0       	rjmp	.+16     	; 0x738 <setTime+0x124>
			case 2: // set AM/PM
				toggleAMPM(CorA);
				break;
		}
	}
	if((PINC & 0x01) == 0x01)	// if enter button pressed
     728:	30 99       	sbic	0x06, 0	; 6
     72a:	c4 cf       	rjmp	.-120    	; 0x6b4 <setTime+0xa0>
     72c:	05 c0       	rjmp	.+10     	; 0x738 <setTime+0x124>
     72e:	30 99       	sbic	0x06, 0	; 6
     730:	f1 cf       	rjmp	.-30     	; 0x714 <setTime+0x100>
     732:	02 c0       	rjmp	.+4      	; 0x738 <setTime+0x124>
     734:	30 99       	sbic	0x06, 0	; 6
     736:	d6 cf       	rjmp	.-84     	; 0x6e4 <setTime+0xd0>
				setState = 0;
				break;
		}
	}
	return setState;
}
     738:	ce 01       	movw	r24, r28
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	08 95       	ret

00000744 <stopwatch>:

void stopwatch(int swsec)
{
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	00 d0       	rcall	.+0      	; 0x74e <stopwatch+0xa>
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
	char mins = '0';
	char secs[2];
	
	sprintf(mins, "%i", swsec/60);
     752:	6c e3       	ldi	r22, 0x3C	; 60
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	0e 94 c8 05 	call	0xb90	; 0xb90 <__divmodhi4>
     75a:	8c 01       	movw	r16, r24
     75c:	7f 93       	push	r23
     75e:	6f 93       	push	r22
     760:	81 e4       	ldi	r24, 0x41	; 65
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	9f 93       	push	r25
     766:	8f 93       	push	r24
     768:	1f 92       	push	r1
     76a:	80 e3       	ldi	r24, 0x30	; 48
     76c:	8f 93       	push	r24
     76e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <sprintf>
	if(swsec%60<10) sprintf(secs, "0%i", swsec%60);
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0a 30       	cpi	r16, 0x0A	; 10
     780:	11 05       	cpc	r17, r1
     782:	9c f4       	brge	.+38     	; 0x7aa <stopwatch+0x66>
     784:	1f 93       	push	r17
     786:	0f 93       	push	r16
     788:	80 e4       	ldi	r24, 0x40	; 64
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	ce 01       	movw	r24, r28
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <sprintf>
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	12 c0       	rjmp	.+36     	; 0x7ce <stopwatch+0x8a>
	else sprintf(secs, "%i", swsec%60);
     7aa:	1f 93       	push	r17
     7ac:	0f 93       	push	r16
     7ae:	81 e4       	ldi	r24, 0x41	; 65
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	9f 93       	push	r25
     7b4:	8f 93       	push	r24
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	9f 93       	push	r25
     7bc:	8f 93       	push	r24
     7be:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <sprintf>
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
	
	lcd_cmd(0xc0);
     7ce:	80 ec       	ldi	r24, 0xC0	; 192
     7d0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
	lcd_data(mins);
     7d4:	80 e3       	ldi	r24, 0x30	; 48
     7d6:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
	lcd_str(":");
     7da:	84 e4       	ldi	r24, 0x44	; 68
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
	lcd_data(secs[0]);
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
	lcd_data(secs[1]);
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
}
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	08 95       	ret

000007fc <main>:
	int stateSelect = 0;
	int clockSetState = 0;
	int alarmSetState = 0;
	int timerSetState = 0;
	
	state = 0;
     7fc:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <state+0x1>
     800:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
	hr = 12;
     804:	8c e0       	ldi	r24, 0x0C	; 12
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <hr+0x1>
     80c:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <hr>
	min = 0;
     810:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <min+0x1>
     814:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <min>
	sec = 0;
     818:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <sec+0x1>
     81c:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <sec>
	ampm = 0;
     820:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <ampm+0x1>
     824:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <ampm>
	alarmHr = 11;
     828:	8b e0       	ldi	r24, 0x0B	; 11
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <alarmHr+0x1>
     830:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <alarmHr>
	alarmMin = 59;
     834:	8b e3       	ldi	r24, 0x3B	; 59
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <alarmMin+0x1>
     83c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <alarmMin>
	alarmSec = 0;
     840:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <alarmSec+0x1>
     844:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <alarmSec>
	alarmAmpm = 0;
     848:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <alarmAmpm+0x1>
     84c:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <alarmAmpm>
	timerMin = 0;
     850:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <timerMin+0x1>
     854:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <timerMin>
	timerSec = 0;
     858:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <timerSec+0x1>
     85c:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <timerSec>
	runTimer = 0;
     860:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <runTimer+0x1>
     864:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <runTimer>
	swSec = 0;
     868:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
     86c:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
	SWrun = 0;
     870:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <SWrun+0x1>
     874:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <SWrun>
	
	sei();
     878:	78 94       	sei
	
	DDRB=0XFF;			// PORT B: data register for LCD set to output
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	84 b9       	out	0x04, r24	; 4
	DDRC=0x00;			// PORT C: push button inputs
     87e:	17 b8       	out	0x07, r1	; 7
	DDRD=0XFF;			// PORT D: PD0:2 LCD commands output
     880:	8a b9       	out	0x0a, r24	; 10

	lcd_init();
     882:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_init>
	displayMenuOption(stateSelect);
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 92 00 	call	0x124	; 0x124 <displayMenuOption>
	
	
	TCCR1B = 0x0C;	// compare value in OCR1A and 1024 prescaler
     88e:	8c e0       	ldi	r24, 0x0C	; 12
     890:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = 0x02;	// timer mask
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	OCR1A = 36000;
     89a:	80 ea       	ldi	r24, 0xA0	; 160
     89c:	9c e8       	ldi	r25, 0x8C	; 140
     89e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

int main()
{
	int stateSelect = 0;
	int clockSetState = 0;
	int alarmSetState = 0;
     8a6:	e1 2c       	mov	r14, r1
     8a8:	f1 2c       	mov	r15, r1


int main()
{
	int stateSelect = 0;
	int clockSetState = 0;
     8aa:	00 e0       	ldi	r16, 0x00	; 0
     8ac:	10 e0       	ldi	r17, 0x00	; 0
}


int main()
{
	int stateSelect = 0;
     8ae:	c0 e0       	ldi	r28, 0x00	; 0
     8b0:	d0 e0       	ldi	r29, 0x00	; 0
					else stateSelect++;
					displayMenuOption(stateSelect);
				}
				else if((PINC & 0x04) == 0x04)	// if decrement button pressed
				{
					if(stateSelect == 0) stateSelect = 4;
     8b2:	0f 2e       	mov	r0, r31
     8b4:	f3 e0       	ldi	r31, 0x03	; 3
     8b6:	4f 2e       	mov	r4, r31
     8b8:	f0 2d       	mov	r31, r0
     8ba:	51 2c       	mov	r5, r1
					_delay_ms(200);
					lcd_str("!!!!!!Alarm!!!!!!");
					lcd_cmd(0xC0);
					lcd_str("*!*!*!*!*!*!*!*!");
					_delay_ms(200);
					alarmHr = 11;
     8bc:	0f 2e       	mov	r0, r31
     8be:	fb e0       	ldi	r31, 0x0B	; 11
     8c0:	af 2e       	mov	r10, r31
     8c2:	b1 2c       	mov	r11, r1
     8c4:	f0 2d       	mov	r31, r0
					alarmMin = 59;
     8c6:	0f 2e       	mov	r0, r31
     8c8:	fb e3       	ldi	r31, 0x3B	; 59
     8ca:	cf 2e       	mov	r12, r31
     8cc:	d1 2c       	mov	r13, r1
     8ce:	f0 2d       	mov	r31, r0
					else stateSelect++;
					displayMenuOption(stateSelect);
				}
				else if((PINC & 0x04) == 0x04)	// if decrement button pressed
				{
					if(stateSelect == 0) stateSelect = 4;
     8d0:	68 94       	set
     8d2:	22 24       	eor	r2, r2
     8d4:	22 f8       	bld	r2, 2
     8d6:	31 2c       	mov	r3, r1
			STATE 4: Timer mode - set time, decrements minutes and seconds
			STATE 5: Alarm - display alarm message
		*/
		
		
		if(alarmHr == hr && alarmMin == min && alarmAmpm == ampm) state = 5;
     8d8:	0f 2e       	mov	r0, r31
     8da:	f5 e0       	ldi	r31, 0x05	; 5
     8dc:	8f 2e       	mov	r8, r31
     8de:	91 2c       	mov	r9, r1
     8e0:	f0 2d       	mov	r31, r0
     8e2:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <alarmHr>
     8e6:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <alarmHr+0x1>
     8ea:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <hr>
     8ee:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <hr+0x1>
     8f2:	28 17       	cp	r18, r24
     8f4:	39 07       	cpc	r19, r25
     8f6:	d9 f4       	brne	.+54     	; 0x92e <__stack+0x2f>
     8f8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <alarmMin>
     8fc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <alarmMin+0x1>
     900:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <min>
     904:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <min+0x1>
     908:	28 17       	cp	r18, r24
     90a:	39 07       	cpc	r19, r25
     90c:	81 f4       	brne	.+32     	; 0x92e <__stack+0x2f>
     90e:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <alarmAmpm>
     912:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <alarmAmpm+0x1>
     916:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ampm>
     91a:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ampm+0x1>
     91e:	28 17       	cp	r18, r24
     920:	39 07       	cpc	r19, r25
     922:	29 f4       	brne	.+10     	; 0x92e <__stack+0x2f>
     924:	90 92 b5 01 	sts	0x01B5, r9	; 0x8001b5 <state+0x1>
     928:	80 92 b4 01 	sts	0x01B4, r8	; 0x8001b4 <state>
     92c:	18 c0       	rjmp	.+48     	; 0x95e <__stack+0x5f>
		
		switch(state)
     92e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <state>
     932:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <state+0x1>
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	91 05       	cpc	r25, r1
     93a:	09 f4       	brne	.+2      	; 0x93e <__stack+0x3f>
     93c:	82 c0       	rjmp	.+260    	; 0xa42 <__stack+0x143>
     93e:	34 f4       	brge	.+12     	; 0x94c <__stack+0x4d>
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	81 f0       	breq	.+32     	; 0x964 <__stack+0x65>
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	09 f4       	brne	.+2      	; 0x94a <__stack+0x4b>
     948:	5f c0       	rjmp	.+190    	; 0xa08 <__stack+0x109>
     94a:	1d c1       	rjmp	.+570    	; 0xb86 <__stack+0x287>
     94c:	84 30       	cpi	r24, 0x04	; 4
     94e:	91 05       	cpc	r25, r1
     950:	09 f4       	brne	.+2      	; 0x954 <__stack+0x55>
     952:	bc c0       	rjmp	.+376    	; 0xacc <__stack+0x1cd>
     954:	0c f4       	brge	.+2      	; 0x958 <__stack+0x59>
     956:	94 c0       	rjmp	.+296    	; 0xa80 <__stack+0x181>
     958:	05 97       	sbiw	r24, 0x05	; 5
     95a:	09 f0       	breq	.+2      	; 0x95e <__stack+0x5f>
     95c:	14 c1       	rjmp	.+552    	; 0xb86 <__stack+0x287>
					else stateSelect++;
					displayMenuOption(stateSelect);
				}
				else if((PINC & 0x04) == 0x04)	// if decrement button pressed
				{
					if(stateSelect == 0) stateSelect = 4;
     95e:	64 2c       	mov	r6, r4
     960:	75 2c       	mov	r7, r5
     962:	da c0       	rjmp	.+436    	; 0xb18 <__stack+0x219>
		if(alarmHr == hr && alarmMin == min && alarmAmpm == ampm) state = 5;
		
		switch(state)
		{
			case 0 :	// display clock and alarm, menu select
				if((PINC & 0x01) == 0x01)	// if enter button pressed
     964:	30 9b       	sbis	0x06, 0	; 6
     966:	2f c0       	rjmp	.+94     	; 0x9c6 <__stack+0xc7>
				{
					state = stateSelect;
     968:	d0 93 b5 01 	sts	0x01B5, r29	; 0x8001b5 <state+0x1>
     96c:	c0 93 b4 01 	sts	0x01B4, r28	; 0x8001b4 <state>
					switch(state)
     970:	c2 30       	cpi	r28, 0x02	; 2
     972:	d1 05       	cpc	r29, r1
     974:	79 f0       	breq	.+30     	; 0x994 <__stack+0x95>
     976:	c3 30       	cpi	r28, 0x03	; 3
     978:	d1 05       	cpc	r29, r1
     97a:	a1 f0       	breq	.+40     	; 0x9a4 <__stack+0xa5>
     97c:	c1 30       	cpi	r28, 0x01	; 1
     97e:	d1 05       	cpc	r29, r1
     980:	09 f0       	breq	.+2      	; 0x984 <__stack+0x85>
     982:	af cf       	rjmp	.-162    	; 0x8e2 <main+0xe6>
					{
						case 1 :  // initial procedure for clock set
							lcd_cmd(0x01);	//clear screen
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
							lcd_str("Clock: set hour");
     98a:	89 e6       	ldi	r24, 0x69	; 105
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
							break;
     992:	a7 cf       	rjmp	.-178    	; 0x8e2 <main+0xe6>
						case 2 : // initial procedure for alarm set
							lcd_cmd(0x01);	//clear screen
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
							lcd_str("Alarm: set hour");
     99a:	89 e7       	ldi	r24, 0x79	; 121
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
							break;
     9a2:	9f cf       	rjmp	.-194    	; 0x8e2 <main+0xe6>
						case 3 : // initial procedure for stopwatch
							lcd_cmd(0x01);
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
							lcd_str("Stopwatch");
     9aa:	8d e2       	ldi	r24, 0x2D	; 45
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
							lcd_cmd(0xC0);
     9b2:	80 ec       	ldi	r24, 0xC0	; 192
     9b4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
							SWrun=1;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <SWrun+0x1>
     9c0:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <SWrun>
							break;
     9c4:	8e cf       	rjmp	.-228    	; 0x8e2 <main+0xe6>
						case 4:	// initial procedure for timer
							
							break;
					}
				}
				else if((PINC & 0x02) == 0x02)	// if increment button pressed
     9c6:	31 9b       	sbis	0x06, 1	; 6
     9c8:	0b c0       	rjmp	.+22     	; 0x9e0 <__stack+0xe1>
				{
					if(stateSelect == 4) stateSelect = 0;
     9ca:	c4 30       	cpi	r28, 0x04	; 4
     9cc:	d1 05       	cpc	r29, r1
     9ce:	11 f0       	breq	.+4      	; 0x9d4 <__stack+0xd5>
					else stateSelect++;
     9d0:	21 96       	adiw	r28, 0x01	; 1
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <__stack+0xd9>
							break;
					}
				}
				else if((PINC & 0x02) == 0x02)	// if increment button pressed
				{
					if(stateSelect == 4) stateSelect = 0;
     9d4:	c0 e0       	ldi	r28, 0x00	; 0
     9d6:	d0 e0       	ldi	r29, 0x00	; 0
					else stateSelect++;
					displayMenuOption(stateSelect);
     9d8:	ce 01       	movw	r24, r28
     9da:	0e 94 92 00 	call	0x124	; 0x124 <displayMenuOption>
     9de:	81 cf       	rjmp	.-254    	; 0x8e2 <main+0xe6>
				}
				else if((PINC & 0x04) == 0x04)	// if decrement button pressed
     9e0:	32 9b       	sbis	0x06, 2	; 6
     9e2:	0a c0       	rjmp	.+20     	; 0x9f8 <__stack+0xf9>
				{
					if(stateSelect == 0) stateSelect = 4;
     9e4:	20 97       	sbiw	r28, 0x00	; 0
     9e6:	11 f0       	breq	.+4      	; 0x9ec <__stack+0xed>
					else stateSelect--;
     9e8:	21 97       	sbiw	r28, 0x01	; 1
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <__stack+0xf1>
					else stateSelect++;
					displayMenuOption(stateSelect);
				}
				else if((PINC & 0x04) == 0x04)	// if decrement button pressed
				{
					if(stateSelect == 0) stateSelect = 4;
     9ec:	c2 2d       	mov	r28, r2
     9ee:	d3 2d       	mov	r29, r3
					else stateSelect--;
					displayMenuOption(stateSelect);
     9f0:	ce 01       	movw	r24, r28
     9f2:	0e 94 92 00 	call	0x124	; 0x124 <displayMenuOption>
     9f6:	75 cf       	rjmp	.-278    	; 0x8e2 <main+0xe6>
				}
				else
				{
					lcd_cmd(0x80);
     9f8:	80 e8       	ldi	r24, 0x80	; 128
     9fa:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
					printClock(0);
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <printClock>
     a06:	6d cf       	rjmp	.-294    	; 0x8e2 <main+0xe6>
				break;
			
			
			
			case 1 :	// set clock
				clockSetState = setTime(0, clockSetState);
     a08:	b8 01       	movw	r22, r16
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 0a 03 	call	0x614	; 0x614 <setTime>
     a12:	8c 01       	movw	r16, r24
				if (clockSetState == 3)
     a14:	03 97       	sbiw	r24, 0x03	; 3
     a16:	09 f0       	breq	.+2      	; 0xa1a <__stack+0x11b>
     a18:	64 cf       	rjmp	.-312    	; 0x8e2 <main+0xe6>
				{
					clockSetState = 0;
					state = 0;
     a1a:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <state+0x1>
     a1e:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
					stateSelect = 0;
					lcd_cmd(0x01);
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
					printClock(0);
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <printClock>
					displayMenuOption(stateSelect);
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 92 00 	call	0x124	; 0x124 <displayMenuOption>
			
			case 1 :	// set clock
				clockSetState = setTime(0, clockSetState);
				if (clockSetState == 3)
				{
					clockSetState = 0;
     a38:	00 e0       	ldi	r16, 0x00	; 0
     a3a:	10 e0       	ldi	r17, 0x00	; 0
					state = 0;
					stateSelect = 0;
     a3c:	c0 e0       	ldi	r28, 0x00	; 0
     a3e:	d0 e0       	ldi	r29, 0x00	; 0
     a40:	50 cf       	rjmp	.-352    	; 0x8e2 <main+0xe6>
			
			
			
			
			case 2:	// set alarm
				alarmSetState = setTime(1, alarmSetState);
     a42:	b7 01       	movw	r22, r14
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 0a 03 	call	0x614	; 0x614 <setTime>
     a4c:	7c 01       	movw	r14, r24
					if (alarmSetState == 3)
     a4e:	93 e0       	ldi	r25, 0x03	; 3
     a50:	e9 16       	cp	r14, r25
     a52:	f1 04       	cpc	r15, r1
     a54:	09 f0       	breq	.+2      	; 0xa58 <__stack+0x159>
     a56:	45 cf       	rjmp	.-374    	; 0x8e2 <main+0xe6>
					{
						alarmSetState = 0;
						state = 0;
     a58:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <state+0x1>
     a5c:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
						stateSelect = 0;
						lcd_cmd(0x01);
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
						printClock(0);
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <printClock>
						displayMenuOption(stateSelect);
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 92 00 	call	0x124	; 0x124 <displayMenuOption>
			
			case 2:	// set alarm
				alarmSetState = setTime(1, alarmSetState);
					if (alarmSetState == 3)
					{
						alarmSetState = 0;
     a76:	e1 2c       	mov	r14, r1
     a78:	f1 2c       	mov	r15, r1
						state = 0;
						stateSelect = 0;
     a7a:	c0 e0       	ldi	r28, 0x00	; 0
     a7c:	d0 e0       	ldi	r29, 0x00	; 0
     a7e:	31 cf       	rjmp	.-414    	; 0x8e2 <main+0xe6>
					}
				break;
				
				
			case 3:	// stopwatch
				stopwatch();
     a80:	0e 94 a2 03 	call	0x744	; 0x744 <stopwatch>
				if((PINC & 0x01) == 0x01 && timerMin > 0)	// if enter button pressed
     a84:	30 9b       	sbis	0x06, 0	; 6
     a86:	2d cf       	rjmp	.-422    	; 0x8e2 <main+0xe6>
     a88:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <timerMin>
     a8c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <timerMin+0x1>
     a90:	18 16       	cp	r1, r24
     a92:	19 06       	cpc	r1, r25
     a94:	0c f0       	brlt	.+2      	; 0xa98 <__stack+0x199>
     a96:	25 cf       	rjmp	.-438    	; 0x8e2 <main+0xe6>
				{
					state = 0;
     a98:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <state+0x1>
     a9c:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
					stateSelect = 0;
					lcd_cmd(0x01);
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
					printClock(0);
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <printClock>
					displayMenuOption(stateSelect);
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 92 00 	call	0x124	; 0x124 <displayMenuOption>
					swSec = 0;
     ab6:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
     aba:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
					SWrun = 0;
     abe:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <SWrun+0x1>
     ac2:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <SWrun>
			case 3:	// stopwatch
				stopwatch();
				if((PINC & 0x01) == 0x01 && timerMin > 0)	// if enter button pressed
				{
					state = 0;
					stateSelect = 0;
     ac6:	c0 e0       	ldi	r28, 0x00	; 0
     ac8:	d0 e0       	ldi	r29, 0x00	; 0
     aca:	0b cf       	rjmp	.-490    	; 0x8e2 <main+0xe6>
				}
				break;
				
				
			case 4:	// timer
				if((PINC & 0x01) == 0x01 && timerMin > 0)	// if enter button pressed
     acc:	30 9b       	sbis	0x06, 0	; 6
     ace:	0e c0       	rjmp	.+28     	; 0xaec <__stack+0x1ed>
     ad0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <timerMin>
     ad4:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <timerMin+0x1>
     ad8:	18 16       	cp	r1, r24
     ada:	19 06       	cpc	r1, r25
     adc:	3c f4       	brge	.+14     	; 0xaec <__stack+0x1ed>
				{
					runTimer = 1;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <runTimer+0x1>
     ae6:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <runTimer>
     aea:	fb ce       	rjmp	.-522    	; 0x8e2 <main+0xe6>
				}
				if(!runTimer)
     aec:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <runTimer>
     af0:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <runTimer+0x1>
     af4:	89 2b       	or	r24, r25
     af6:	09 f0       	breq	.+2      	; 0xafa <__stack+0x1fb>
     af8:	f4 ce       	rjmp	.-536    	; 0x8e2 <main+0xe6>
				{
					if((PINC & 0x02) == 0x02)	// if increment button pressed
     afa:	31 9b       	sbis	0x06, 1	; 6
     afc:	06 c0       	rjmp	.+12     	; 0xb0a <__stack+0x20b>
					{
						incMin(2, 0);
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 1c 02 	call	0x438	; 0x438 <incMin>
					}
					if((PINC & 0x04) == 0x04)	// if decrement button pressed
     b0a:	32 9b       	sbis	0x06, 2	; 6
     b0c:	ea ce       	rjmp	.-556    	; 0x8e2 <main+0xe6>
					{
						decMin(2);
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <decMin>
     b16:	e5 ce       	rjmp	.-566    	; 0x8e2 <main+0xe6>
				break;
			
			case 5:	// sound the alarm
				for(int i=0; i<3; i++)
				{
					lcd_cmd(0x01);
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
     b1e:	2f ef       	ldi	r18, 0xFF	; 255
     b20:	81 ee       	ldi	r24, 0xE1	; 225
     b22:	94 e0       	ldi	r25, 0x04	; 4
     b24:	21 50       	subi	r18, 0x01	; 1
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	90 40       	sbci	r25, 0x00	; 0
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <__stack+0x225>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <__stack+0x22f>
     b2e:	00 00       	nop
					_delay_ms(200);
					lcd_str("!!!!!!Alarm!!!!!!");
     b30:	89 e8       	ldi	r24, 0x89	; 137
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
					lcd_cmd(0xC0);
     b38:	80 ec       	ldi	r24, 0xC0	; 192
     b3a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
					lcd_str("*!*!*!*!*!*!*!*!");
     b3e:	8b e9       	ldi	r24, 0x9B	; 155
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 83 00 	call	0x106	; 0x106 <lcd_str>
     b46:	2f ef       	ldi	r18, 0xFF	; 255
     b48:	81 ee       	ldi	r24, 0xE1	; 225
     b4a:	94 e0       	ldi	r25, 0x04	; 4
     b4c:	21 50       	subi	r18, 0x01	; 1
     b4e:	80 40       	sbci	r24, 0x00	; 0
     b50:	90 40       	sbci	r25, 0x00	; 0
     b52:	e1 f7       	brne	.-8      	; 0xb4c <__stack+0x24d>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <__stack+0x257>
     b56:	00 00       	nop
					_delay_ms(200);
					alarmHr = 11;
     b58:	b0 92 bb 01 	sts	0x01BB, r11	; 0x8001bb <alarmHr+0x1>
     b5c:	a0 92 ba 01 	sts	0x01BA, r10	; 0x8001ba <alarmHr>
					alarmMin = 59;
     b60:	d0 92 b7 01 	sts	0x01B7, r13	; 0x8001b7 <alarmMin+0x1>
     b64:	c0 92 b6 01 	sts	0x01B6, r12	; 0x8001b6 <alarmMin>
     b68:	21 e0       	ldi	r18, 0x01	; 1
     b6a:	62 1a       	sub	r6, r18
     b6c:	71 08       	sbc	r7, r1
				}
				//printTimer();
				break;
			
			case 5:	// sound the alarm
				for(int i=0; i<3; i++)
     b6e:	a1 f6       	brne	.-88     	; 0xb18 <__stack+0x219>
					lcd_str("*!*!*!*!*!*!*!*!");
					_delay_ms(200);
					alarmHr = 11;
					alarmMin = 59;
				}
				state = 0;
     b70:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <state+0x1>
     b74:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
				lcd_cmd(0x01);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
				displayMenuOption(stateSelect);
     b7e:	ce 01       	movw	r24, r28
     b80:	0e 94 92 00 	call	0x124	; 0x124 <displayMenuOption>
				break;
     b84:	ae ce       	rjmp	.-676    	; 0x8e2 <main+0xe6>
				
			default: state = 0;
     b86:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <state+0x1>
     b8a:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
     b8e:	a9 ce       	rjmp	.-686    	; 0x8e2 <main+0xe6>

00000b90 <__divmodhi4>:
     b90:	97 fb       	bst	r25, 7
     b92:	07 2e       	mov	r0, r23
     b94:	16 f4       	brtc	.+4      	; 0xb9a <__divmodhi4+0xa>
     b96:	00 94       	com	r0
     b98:	07 d0       	rcall	.+14     	; 0xba8 <__divmodhi4_neg1>
     b9a:	77 fd       	sbrc	r23, 7
     b9c:	09 d0       	rcall	.+18     	; 0xbb0 <__divmodhi4_neg2>
     b9e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__udivmodhi4>
     ba2:	07 fc       	sbrc	r0, 7
     ba4:	05 d0       	rcall	.+10     	; 0xbb0 <__divmodhi4_neg2>
     ba6:	3e f4       	brtc	.+14     	; 0xbb6 <__divmodhi4_exit>

00000ba8 <__divmodhi4_neg1>:
     ba8:	90 95       	com	r25
     baa:	81 95       	neg	r24
     bac:	9f 4f       	sbci	r25, 0xFF	; 255
     bae:	08 95       	ret

00000bb0 <__divmodhi4_neg2>:
     bb0:	70 95       	com	r23
     bb2:	61 95       	neg	r22
     bb4:	7f 4f       	sbci	r23, 0xFF	; 255

00000bb6 <__divmodhi4_exit>:
     bb6:	08 95       	ret

00000bb8 <__udivmodhi4>:
     bb8:	aa 1b       	sub	r26, r26
     bba:	bb 1b       	sub	r27, r27
     bbc:	51 e1       	ldi	r21, 0x11	; 17
     bbe:	07 c0       	rjmp	.+14     	; 0xbce <__udivmodhi4_ep>

00000bc0 <__udivmodhi4_loop>:
     bc0:	aa 1f       	adc	r26, r26
     bc2:	bb 1f       	adc	r27, r27
     bc4:	a6 17       	cp	r26, r22
     bc6:	b7 07       	cpc	r27, r23
     bc8:	10 f0       	brcs	.+4      	; 0xbce <__udivmodhi4_ep>
     bca:	a6 1b       	sub	r26, r22
     bcc:	b7 0b       	sbc	r27, r23

00000bce <__udivmodhi4_ep>:
     bce:	88 1f       	adc	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	5a 95       	dec	r21
     bd4:	a9 f7       	brne	.-22     	; 0xbc0 <__udivmodhi4_loop>
     bd6:	80 95       	com	r24
     bd8:	90 95       	com	r25
     bda:	bc 01       	movw	r22, r24
     bdc:	cd 01       	movw	r24, r26
     bde:	08 95       	ret

00000be0 <sprintf>:
     be0:	ae e0       	ldi	r26, 0x0E	; 14
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e6 ef       	ldi	r30, 0xF6	; 246
     be6:	f5 e0       	ldi	r31, 0x05	; 5
     be8:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__prologue_saves__+0x1c>
     bec:	0d 89       	ldd	r16, Y+21	; 0x15
     bee:	1e 89       	ldd	r17, Y+22	; 0x16
     bf0:	86 e0       	ldi	r24, 0x06	; 6
     bf2:	8c 83       	std	Y+4, r24	; 0x04
     bf4:	1a 83       	std	Y+2, r17	; 0x02
     bf6:	09 83       	std	Y+1, r16	; 0x01
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
     bfa:	9f e7       	ldi	r25, 0x7F	; 127
     bfc:	9e 83       	std	Y+6, r25	; 0x06
     bfe:	8d 83       	std	Y+5, r24	; 0x05
     c00:	ae 01       	movw	r20, r28
     c02:	47 5e       	subi	r20, 0xE7	; 231
     c04:	5f 4f       	sbci	r21, 0xFF	; 255
     c06:	6f 89       	ldd	r22, Y+23	; 0x17
     c08:	78 8d       	ldd	r23, Y+24	; 0x18
     c0a:	ce 01       	movw	r24, r28
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	0e 94 13 06 	call	0xc26	; 0xc26 <vfprintf>
     c12:	2f 81       	ldd	r18, Y+7	; 0x07
     c14:	38 85       	ldd	r19, Y+8	; 0x08
     c16:	f8 01       	movw	r30, r16
     c18:	e2 0f       	add	r30, r18
     c1a:	f3 1f       	adc	r31, r19
     c1c:	10 82       	st	Z, r1
     c1e:	2e 96       	adiw	r28, 0x0e	; 14
     c20:	e4 e0       	ldi	r30, 0x04	; 4
     c22:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__epilogue_restores__+0x1c>

00000c26 <vfprintf>:
     c26:	ac e0       	ldi	r26, 0x0C	; 12
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e9 e1       	ldi	r30, 0x19	; 25
     c2c:	f6 e0       	ldi	r31, 0x06	; 6
     c2e:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__prologue_saves__>
     c32:	7c 01       	movw	r14, r24
     c34:	6b 01       	movw	r12, r22
     c36:	8a 01       	movw	r16, r20
     c38:	fc 01       	movw	r30, r24
     c3a:	17 82       	std	Z+7, r1	; 0x07
     c3c:	16 82       	std	Z+6, r1	; 0x06
     c3e:	83 81       	ldd	r24, Z+3	; 0x03
     c40:	81 ff       	sbrs	r24, 1
     c42:	bd c1       	rjmp	.+890    	; 0xfbe <vfprintf+0x398>
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	4c 01       	movw	r8, r24
     c4a:	f7 01       	movw	r30, r14
     c4c:	93 81       	ldd	r25, Z+3	; 0x03
     c4e:	f6 01       	movw	r30, r12
     c50:	93 fd       	sbrc	r25, 3
     c52:	85 91       	lpm	r24, Z+
     c54:	93 ff       	sbrs	r25, 3
     c56:	81 91       	ld	r24, Z+
     c58:	6f 01       	movw	r12, r30
     c5a:	88 23       	and	r24, r24
     c5c:	09 f4       	brne	.+2      	; 0xc60 <vfprintf+0x3a>
     c5e:	ab c1       	rjmp	.+854    	; 0xfb6 <vfprintf+0x390>
     c60:	85 32       	cpi	r24, 0x25	; 37
     c62:	39 f4       	brne	.+14     	; 0xc72 <vfprintf+0x4c>
     c64:	93 fd       	sbrc	r25, 3
     c66:	85 91       	lpm	r24, Z+
     c68:	93 ff       	sbrs	r25, 3
     c6a:	81 91       	ld	r24, Z+
     c6c:	6f 01       	movw	r12, r30
     c6e:	85 32       	cpi	r24, 0x25	; 37
     c70:	29 f4       	brne	.+10     	; 0xc7c <vfprintf+0x56>
     c72:	b7 01       	movw	r22, r14
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 fb 07 	call	0xff6	; 0xff6 <fputc>
     c7a:	e7 cf       	rjmp	.-50     	; 0xc4a <vfprintf+0x24>
     c7c:	51 2c       	mov	r5, r1
     c7e:	31 2c       	mov	r3, r1
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	20 32       	cpi	r18, 0x20	; 32
     c84:	a0 f4       	brcc	.+40     	; 0xcae <vfprintf+0x88>
     c86:	8b 32       	cpi	r24, 0x2B	; 43
     c88:	69 f0       	breq	.+26     	; 0xca4 <vfprintf+0x7e>
     c8a:	30 f4       	brcc	.+12     	; 0xc98 <vfprintf+0x72>
     c8c:	80 32       	cpi	r24, 0x20	; 32
     c8e:	59 f0       	breq	.+22     	; 0xca6 <vfprintf+0x80>
     c90:	83 32       	cpi	r24, 0x23	; 35
     c92:	69 f4       	brne	.+26     	; 0xcae <vfprintf+0x88>
     c94:	20 61       	ori	r18, 0x10	; 16
     c96:	2c c0       	rjmp	.+88     	; 0xcf0 <vfprintf+0xca>
     c98:	8d 32       	cpi	r24, 0x2D	; 45
     c9a:	39 f0       	breq	.+14     	; 0xcaa <vfprintf+0x84>
     c9c:	80 33       	cpi	r24, 0x30	; 48
     c9e:	39 f4       	brne	.+14     	; 0xcae <vfprintf+0x88>
     ca0:	21 60       	ori	r18, 0x01	; 1
     ca2:	26 c0       	rjmp	.+76     	; 0xcf0 <vfprintf+0xca>
     ca4:	22 60       	ori	r18, 0x02	; 2
     ca6:	24 60       	ori	r18, 0x04	; 4
     ca8:	23 c0       	rjmp	.+70     	; 0xcf0 <vfprintf+0xca>
     caa:	28 60       	ori	r18, 0x08	; 8
     cac:	21 c0       	rjmp	.+66     	; 0xcf0 <vfprintf+0xca>
     cae:	27 fd       	sbrc	r18, 7
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <vfprintf+0xda>
     cb2:	30 ed       	ldi	r19, 0xD0	; 208
     cb4:	38 0f       	add	r19, r24
     cb6:	3a 30       	cpi	r19, 0x0A	; 10
     cb8:	78 f4       	brcc	.+30     	; 0xcd8 <vfprintf+0xb2>
     cba:	26 ff       	sbrs	r18, 6
     cbc:	06 c0       	rjmp	.+12     	; 0xcca <vfprintf+0xa4>
     cbe:	fa e0       	ldi	r31, 0x0A	; 10
     cc0:	5f 9e       	mul	r5, r31
     cc2:	30 0d       	add	r19, r0
     cc4:	11 24       	eor	r1, r1
     cc6:	53 2e       	mov	r5, r19
     cc8:	13 c0       	rjmp	.+38     	; 0xcf0 <vfprintf+0xca>
     cca:	8a e0       	ldi	r24, 0x0A	; 10
     ccc:	38 9e       	mul	r3, r24
     cce:	30 0d       	add	r19, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	33 2e       	mov	r3, r19
     cd4:	20 62       	ori	r18, 0x20	; 32
     cd6:	0c c0       	rjmp	.+24     	; 0xcf0 <vfprintf+0xca>
     cd8:	8e 32       	cpi	r24, 0x2E	; 46
     cda:	21 f4       	brne	.+8      	; 0xce4 <vfprintf+0xbe>
     cdc:	26 fd       	sbrc	r18, 6
     cde:	6b c1       	rjmp	.+726    	; 0xfb6 <vfprintf+0x390>
     ce0:	20 64       	ori	r18, 0x40	; 64
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <vfprintf+0xca>
     ce4:	8c 36       	cpi	r24, 0x6C	; 108
     ce6:	11 f4       	brne	.+4      	; 0xcec <vfprintf+0xc6>
     ce8:	20 68       	ori	r18, 0x80	; 128
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <vfprintf+0xca>
     cec:	88 36       	cpi	r24, 0x68	; 104
     cee:	41 f4       	brne	.+16     	; 0xd00 <vfprintf+0xda>
     cf0:	f6 01       	movw	r30, r12
     cf2:	93 fd       	sbrc	r25, 3
     cf4:	85 91       	lpm	r24, Z+
     cf6:	93 ff       	sbrs	r25, 3
     cf8:	81 91       	ld	r24, Z+
     cfa:	6f 01       	movw	r12, r30
     cfc:	81 11       	cpse	r24, r1
     cfe:	c1 cf       	rjmp	.-126    	; 0xc82 <vfprintf+0x5c>
     d00:	98 2f       	mov	r25, r24
     d02:	9f 7d       	andi	r25, 0xDF	; 223
     d04:	95 54       	subi	r25, 0x45	; 69
     d06:	93 30       	cpi	r25, 0x03	; 3
     d08:	28 f4       	brcc	.+10     	; 0xd14 <vfprintf+0xee>
     d0a:	0c 5f       	subi	r16, 0xFC	; 252
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	ff e3       	ldi	r31, 0x3F	; 63
     d10:	f9 83       	std	Y+1, r31	; 0x01
     d12:	0d c0       	rjmp	.+26     	; 0xd2e <vfprintf+0x108>
     d14:	83 36       	cpi	r24, 0x63	; 99
     d16:	31 f0       	breq	.+12     	; 0xd24 <vfprintf+0xfe>
     d18:	83 37       	cpi	r24, 0x73	; 115
     d1a:	71 f0       	breq	.+28     	; 0xd38 <vfprintf+0x112>
     d1c:	83 35       	cpi	r24, 0x53	; 83
     d1e:	09 f0       	breq	.+2      	; 0xd22 <vfprintf+0xfc>
     d20:	5b c0       	rjmp	.+182    	; 0xdd8 <vfprintf+0x1b2>
     d22:	22 c0       	rjmp	.+68     	; 0xd68 <vfprintf+0x142>
     d24:	f8 01       	movw	r30, r16
     d26:	80 81       	ld	r24, Z
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	0e 5f       	subi	r16, 0xFE	; 254
     d2c:	1f 4f       	sbci	r17, 0xFF	; 255
     d2e:	44 24       	eor	r4, r4
     d30:	43 94       	inc	r4
     d32:	51 2c       	mov	r5, r1
     d34:	54 01       	movw	r10, r8
     d36:	15 c0       	rjmp	.+42     	; 0xd62 <vfprintf+0x13c>
     d38:	38 01       	movw	r6, r16
     d3a:	f2 e0       	ldi	r31, 0x02	; 2
     d3c:	6f 0e       	add	r6, r31
     d3e:	71 1c       	adc	r7, r1
     d40:	f8 01       	movw	r30, r16
     d42:	a0 80       	ld	r10, Z
     d44:	b1 80       	ldd	r11, Z+1	; 0x01
     d46:	26 ff       	sbrs	r18, 6
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <vfprintf+0x12a>
     d4a:	65 2d       	mov	r22, r5
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <vfprintf+0x12e>
     d50:	6f ef       	ldi	r22, 0xFF	; 255
     d52:	7f ef       	ldi	r23, 0xFF	; 255
     d54:	c5 01       	movw	r24, r10
     d56:	2c 87       	std	Y+12, r18	; 0x0c
     d58:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <strnlen>
     d5c:	2c 01       	movw	r4, r24
     d5e:	83 01       	movw	r16, r6
     d60:	2c 85       	ldd	r18, Y+12	; 0x0c
     d62:	2f 77       	andi	r18, 0x7F	; 127
     d64:	22 2e       	mov	r2, r18
     d66:	17 c0       	rjmp	.+46     	; 0xd96 <vfprintf+0x170>
     d68:	38 01       	movw	r6, r16
     d6a:	f2 e0       	ldi	r31, 0x02	; 2
     d6c:	6f 0e       	add	r6, r31
     d6e:	71 1c       	adc	r7, r1
     d70:	f8 01       	movw	r30, r16
     d72:	a0 80       	ld	r10, Z
     d74:	b1 80       	ldd	r11, Z+1	; 0x01
     d76:	26 ff       	sbrs	r18, 6
     d78:	03 c0       	rjmp	.+6      	; 0xd80 <vfprintf+0x15a>
     d7a:	65 2d       	mov	r22, r5
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <vfprintf+0x15e>
     d80:	6f ef       	ldi	r22, 0xFF	; 255
     d82:	7f ef       	ldi	r23, 0xFF	; 255
     d84:	c5 01       	movw	r24, r10
     d86:	2c 87       	std	Y+12, r18	; 0x0c
     d88:	0e 94 e5 07 	call	0xfca	; 0xfca <strnlen_P>
     d8c:	2c 01       	movw	r4, r24
     d8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     d90:	20 68       	ori	r18, 0x80	; 128
     d92:	22 2e       	mov	r2, r18
     d94:	83 01       	movw	r16, r6
     d96:	23 fc       	sbrc	r2, 3
     d98:	1b c0       	rjmp	.+54     	; 0xdd0 <vfprintf+0x1aa>
     d9a:	83 2d       	mov	r24, r3
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	48 16       	cp	r4, r24
     da0:	59 06       	cpc	r5, r25
     da2:	b0 f4       	brcc	.+44     	; 0xdd0 <vfprintf+0x1aa>
     da4:	b7 01       	movw	r22, r14
     da6:	80 e2       	ldi	r24, 0x20	; 32
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 fb 07 	call	0xff6	; 0xff6 <fputc>
     dae:	3a 94       	dec	r3
     db0:	f4 cf       	rjmp	.-24     	; 0xd9a <vfprintf+0x174>
     db2:	f5 01       	movw	r30, r10
     db4:	27 fc       	sbrc	r2, 7
     db6:	85 91       	lpm	r24, Z+
     db8:	27 fe       	sbrs	r2, 7
     dba:	81 91       	ld	r24, Z+
     dbc:	5f 01       	movw	r10, r30
     dbe:	b7 01       	movw	r22, r14
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 fb 07 	call	0xff6	; 0xff6 <fputc>
     dc6:	31 10       	cpse	r3, r1
     dc8:	3a 94       	dec	r3
     dca:	f1 e0       	ldi	r31, 0x01	; 1
     dcc:	4f 1a       	sub	r4, r31
     dce:	51 08       	sbc	r5, r1
     dd0:	41 14       	cp	r4, r1
     dd2:	51 04       	cpc	r5, r1
     dd4:	71 f7       	brne	.-36     	; 0xdb2 <vfprintf+0x18c>
     dd6:	e5 c0       	rjmp	.+458    	; 0xfa2 <vfprintf+0x37c>
     dd8:	84 36       	cpi	r24, 0x64	; 100
     dda:	11 f0       	breq	.+4      	; 0xde0 <vfprintf+0x1ba>
     ddc:	89 36       	cpi	r24, 0x69	; 105
     dde:	39 f5       	brne	.+78     	; 0xe2e <vfprintf+0x208>
     de0:	f8 01       	movw	r30, r16
     de2:	27 ff       	sbrs	r18, 7
     de4:	07 c0       	rjmp	.+14     	; 0xdf4 <vfprintf+0x1ce>
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	0c 5f       	subi	r16, 0xFC	; 252
     df0:	1f 4f       	sbci	r17, 0xFF	; 255
     df2:	08 c0       	rjmp	.+16     	; 0xe04 <vfprintf+0x1de>
     df4:	60 81       	ld	r22, Z
     df6:	71 81       	ldd	r23, Z+1	; 0x01
     df8:	07 2e       	mov	r0, r23
     dfa:	00 0c       	add	r0, r0
     dfc:	88 0b       	sbc	r24, r24
     dfe:	99 0b       	sbc	r25, r25
     e00:	0e 5f       	subi	r16, 0xFE	; 254
     e02:	1f 4f       	sbci	r17, 0xFF	; 255
     e04:	2f 76       	andi	r18, 0x6F	; 111
     e06:	72 2e       	mov	r7, r18
     e08:	97 ff       	sbrs	r25, 7
     e0a:	09 c0       	rjmp	.+18     	; 0xe1e <vfprintf+0x1f8>
     e0c:	90 95       	com	r25
     e0e:	80 95       	com	r24
     e10:	70 95       	com	r23
     e12:	61 95       	neg	r22
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	8f 4f       	sbci	r24, 0xFF	; 255
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	20 68       	ori	r18, 0x80	; 128
     e1c:	72 2e       	mov	r7, r18
     e1e:	2a e0       	ldi	r18, 0x0A	; 10
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	a4 01       	movw	r20, r8
     e24:	0e 94 33 08 	call	0x1066	; 0x1066 <__ultoa_invert>
     e28:	a8 2e       	mov	r10, r24
     e2a:	a8 18       	sub	r10, r8
     e2c:	44 c0       	rjmp	.+136    	; 0xeb6 <vfprintf+0x290>
     e2e:	85 37       	cpi	r24, 0x75	; 117
     e30:	29 f4       	brne	.+10     	; 0xe3c <vfprintf+0x216>
     e32:	2f 7e       	andi	r18, 0xEF	; 239
     e34:	b2 2e       	mov	r11, r18
     e36:	2a e0       	ldi	r18, 0x0A	; 10
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	25 c0       	rjmp	.+74     	; 0xe86 <vfprintf+0x260>
     e3c:	f2 2f       	mov	r31, r18
     e3e:	f9 7f       	andi	r31, 0xF9	; 249
     e40:	bf 2e       	mov	r11, r31
     e42:	8f 36       	cpi	r24, 0x6F	; 111
     e44:	c1 f0       	breq	.+48     	; 0xe76 <vfprintf+0x250>
     e46:	18 f4       	brcc	.+6      	; 0xe4e <vfprintf+0x228>
     e48:	88 35       	cpi	r24, 0x58	; 88
     e4a:	79 f0       	breq	.+30     	; 0xe6a <vfprintf+0x244>
     e4c:	b4 c0       	rjmp	.+360    	; 0xfb6 <vfprintf+0x390>
     e4e:	80 37       	cpi	r24, 0x70	; 112
     e50:	19 f0       	breq	.+6      	; 0xe58 <vfprintf+0x232>
     e52:	88 37       	cpi	r24, 0x78	; 120
     e54:	21 f0       	breq	.+8      	; 0xe5e <vfprintf+0x238>
     e56:	af c0       	rjmp	.+350    	; 0xfb6 <vfprintf+0x390>
     e58:	2f 2f       	mov	r18, r31
     e5a:	20 61       	ori	r18, 0x10	; 16
     e5c:	b2 2e       	mov	r11, r18
     e5e:	b4 fe       	sbrs	r11, 4
     e60:	0d c0       	rjmp	.+26     	; 0xe7c <vfprintf+0x256>
     e62:	8b 2d       	mov	r24, r11
     e64:	84 60       	ori	r24, 0x04	; 4
     e66:	b8 2e       	mov	r11, r24
     e68:	09 c0       	rjmp	.+18     	; 0xe7c <vfprintf+0x256>
     e6a:	24 ff       	sbrs	r18, 4
     e6c:	0a c0       	rjmp	.+20     	; 0xe82 <vfprintf+0x25c>
     e6e:	9f 2f       	mov	r25, r31
     e70:	96 60       	ori	r25, 0x06	; 6
     e72:	b9 2e       	mov	r11, r25
     e74:	06 c0       	rjmp	.+12     	; 0xe82 <vfprintf+0x25c>
     e76:	28 e0       	ldi	r18, 0x08	; 8
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	05 c0       	rjmp	.+10     	; 0xe86 <vfprintf+0x260>
     e7c:	20 e1       	ldi	r18, 0x10	; 16
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <vfprintf+0x260>
     e82:	20 e1       	ldi	r18, 0x10	; 16
     e84:	32 e0       	ldi	r19, 0x02	; 2
     e86:	f8 01       	movw	r30, r16
     e88:	b7 fe       	sbrs	r11, 7
     e8a:	07 c0       	rjmp	.+14     	; 0xe9a <vfprintf+0x274>
     e8c:	60 81       	ld	r22, Z
     e8e:	71 81       	ldd	r23, Z+1	; 0x01
     e90:	82 81       	ldd	r24, Z+2	; 0x02
     e92:	93 81       	ldd	r25, Z+3	; 0x03
     e94:	0c 5f       	subi	r16, 0xFC	; 252
     e96:	1f 4f       	sbci	r17, 0xFF	; 255
     e98:	06 c0       	rjmp	.+12     	; 0xea6 <vfprintf+0x280>
     e9a:	60 81       	ld	r22, Z
     e9c:	71 81       	ldd	r23, Z+1	; 0x01
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 5f       	subi	r16, 0xFE	; 254
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	a4 01       	movw	r20, r8
     ea8:	0e 94 33 08 	call	0x1066	; 0x1066 <__ultoa_invert>
     eac:	a8 2e       	mov	r10, r24
     eae:	a8 18       	sub	r10, r8
     eb0:	fb 2d       	mov	r31, r11
     eb2:	ff 77       	andi	r31, 0x7F	; 127
     eb4:	7f 2e       	mov	r7, r31
     eb6:	76 fe       	sbrs	r7, 6
     eb8:	0b c0       	rjmp	.+22     	; 0xed0 <vfprintf+0x2aa>
     eba:	37 2d       	mov	r19, r7
     ebc:	3e 7f       	andi	r19, 0xFE	; 254
     ebe:	a5 14       	cp	r10, r5
     ec0:	50 f4       	brcc	.+20     	; 0xed6 <vfprintf+0x2b0>
     ec2:	74 fe       	sbrs	r7, 4
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <vfprintf+0x2b4>
     ec6:	72 fc       	sbrc	r7, 2
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <vfprintf+0x2b4>
     eca:	37 2d       	mov	r19, r7
     ecc:	3e 7e       	andi	r19, 0xEE	; 238
     ece:	05 c0       	rjmp	.+10     	; 0xeda <vfprintf+0x2b4>
     ed0:	ba 2c       	mov	r11, r10
     ed2:	37 2d       	mov	r19, r7
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <vfprintf+0x2b6>
     ed6:	ba 2c       	mov	r11, r10
     ed8:	01 c0       	rjmp	.+2      	; 0xedc <vfprintf+0x2b6>
     eda:	b5 2c       	mov	r11, r5
     edc:	34 ff       	sbrs	r19, 4
     ede:	0d c0       	rjmp	.+26     	; 0xefa <vfprintf+0x2d4>
     ee0:	fe 01       	movw	r30, r28
     ee2:	ea 0d       	add	r30, r10
     ee4:	f1 1d       	adc	r31, r1
     ee6:	80 81       	ld	r24, Z
     ee8:	80 33       	cpi	r24, 0x30	; 48
     eea:	11 f4       	brne	.+4      	; 0xef0 <vfprintf+0x2ca>
     eec:	39 7e       	andi	r19, 0xE9	; 233
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <vfprintf+0x2dc>
     ef0:	32 ff       	sbrs	r19, 2
     ef2:	06 c0       	rjmp	.+12     	; 0xf00 <vfprintf+0x2da>
     ef4:	b3 94       	inc	r11
     ef6:	b3 94       	inc	r11
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <vfprintf+0x2dc>
     efa:	83 2f       	mov	r24, r19
     efc:	86 78       	andi	r24, 0x86	; 134
     efe:	09 f0       	breq	.+2      	; 0xf02 <vfprintf+0x2dc>
     f00:	b3 94       	inc	r11
     f02:	33 fd       	sbrc	r19, 3
     f04:	13 c0       	rjmp	.+38     	; 0xf2c <vfprintf+0x306>
     f06:	30 ff       	sbrs	r19, 0
     f08:	06 c0       	rjmp	.+12     	; 0xf16 <vfprintf+0x2f0>
     f0a:	5a 2c       	mov	r5, r10
     f0c:	b3 14       	cp	r11, r3
     f0e:	18 f4       	brcc	.+6      	; 0xf16 <vfprintf+0x2f0>
     f10:	53 0c       	add	r5, r3
     f12:	5b 18       	sub	r5, r11
     f14:	b3 2c       	mov	r11, r3
     f16:	b3 14       	cp	r11, r3
     f18:	68 f4       	brcc	.+26     	; 0xf34 <vfprintf+0x30e>
     f1a:	b7 01       	movw	r22, r14
     f1c:	80 e2       	ldi	r24, 0x20	; 32
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	3c 87       	std	Y+12, r19	; 0x0c
     f22:	0e 94 fb 07 	call	0xff6	; 0xff6 <fputc>
     f26:	b3 94       	inc	r11
     f28:	3c 85       	ldd	r19, Y+12	; 0x0c
     f2a:	f5 cf       	rjmp	.-22     	; 0xf16 <vfprintf+0x2f0>
     f2c:	b3 14       	cp	r11, r3
     f2e:	10 f4       	brcc	.+4      	; 0xf34 <vfprintf+0x30e>
     f30:	3b 18       	sub	r3, r11
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <vfprintf+0x310>
     f34:	31 2c       	mov	r3, r1
     f36:	34 ff       	sbrs	r19, 4
     f38:	12 c0       	rjmp	.+36     	; 0xf5e <vfprintf+0x338>
     f3a:	b7 01       	movw	r22, r14
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	3c 87       	std	Y+12, r19	; 0x0c
     f42:	0e 94 fb 07 	call	0xff6	; 0xff6 <fputc>
     f46:	3c 85       	ldd	r19, Y+12	; 0x0c
     f48:	32 ff       	sbrs	r19, 2
     f4a:	17 c0       	rjmp	.+46     	; 0xf7a <vfprintf+0x354>
     f4c:	31 fd       	sbrc	r19, 1
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <vfprintf+0x330>
     f50:	88 e7       	ldi	r24, 0x78	; 120
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <vfprintf+0x334>
     f56:	88 e5       	ldi	r24, 0x58	; 88
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	b7 01       	movw	r22, r14
     f5c:	0c c0       	rjmp	.+24     	; 0xf76 <vfprintf+0x350>
     f5e:	83 2f       	mov	r24, r19
     f60:	86 78       	andi	r24, 0x86	; 134
     f62:	59 f0       	breq	.+22     	; 0xf7a <vfprintf+0x354>
     f64:	31 ff       	sbrs	r19, 1
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <vfprintf+0x346>
     f68:	8b e2       	ldi	r24, 0x2B	; 43
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <vfprintf+0x348>
     f6c:	80 e2       	ldi	r24, 0x20	; 32
     f6e:	37 fd       	sbrc	r19, 7
     f70:	8d e2       	ldi	r24, 0x2D	; 45
     f72:	b7 01       	movw	r22, r14
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 fb 07 	call	0xff6	; 0xff6 <fputc>
     f7a:	a5 14       	cp	r10, r5
     f7c:	38 f4       	brcc	.+14     	; 0xf8c <vfprintf+0x366>
     f7e:	b7 01       	movw	r22, r14
     f80:	80 e3       	ldi	r24, 0x30	; 48
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 fb 07 	call	0xff6	; 0xff6 <fputc>
     f88:	5a 94       	dec	r5
     f8a:	f7 cf       	rjmp	.-18     	; 0xf7a <vfprintf+0x354>
     f8c:	aa 94       	dec	r10
     f8e:	f4 01       	movw	r30, r8
     f90:	ea 0d       	add	r30, r10
     f92:	f1 1d       	adc	r31, r1
     f94:	80 81       	ld	r24, Z
     f96:	b7 01       	movw	r22, r14
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 fb 07 	call	0xff6	; 0xff6 <fputc>
     f9e:	a1 10       	cpse	r10, r1
     fa0:	f5 cf       	rjmp	.-22     	; 0xf8c <vfprintf+0x366>
     fa2:	33 20       	and	r3, r3
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <vfprintf+0x382>
     fa6:	51 ce       	rjmp	.-862    	; 0xc4a <vfprintf+0x24>
     fa8:	b7 01       	movw	r22, r14
     faa:	80 e2       	ldi	r24, 0x20	; 32
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 fb 07 	call	0xff6	; 0xff6 <fputc>
     fb2:	3a 94       	dec	r3
     fb4:	f6 cf       	rjmp	.-20     	; 0xfa2 <vfprintf+0x37c>
     fb6:	f7 01       	movw	r30, r14
     fb8:	86 81       	ldd	r24, Z+6	; 0x06
     fba:	97 81       	ldd	r25, Z+7	; 0x07
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <vfprintf+0x39c>
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	9f ef       	ldi	r25, 0xFF	; 255
     fc2:	2c 96       	adiw	r28, 0x0c	; 12
     fc4:	e2 e1       	ldi	r30, 0x12	; 18
     fc6:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__epilogue_restores__>

00000fca <strnlen_P>:
     fca:	fc 01       	movw	r30, r24
     fcc:	05 90       	lpm	r0, Z+
     fce:	61 50       	subi	r22, 0x01	; 1
     fd0:	70 40       	sbci	r23, 0x00	; 0
     fd2:	01 10       	cpse	r0, r1
     fd4:	d8 f7       	brcc	.-10     	; 0xfcc <strnlen_P+0x2>
     fd6:	80 95       	com	r24
     fd8:	90 95       	com	r25
     fda:	8e 0f       	add	r24, r30
     fdc:	9f 1f       	adc	r25, r31
     fde:	08 95       	ret

00000fe0 <strnlen>:
     fe0:	fc 01       	movw	r30, r24
     fe2:	61 50       	subi	r22, 0x01	; 1
     fe4:	70 40       	sbci	r23, 0x00	; 0
     fe6:	01 90       	ld	r0, Z+
     fe8:	01 10       	cpse	r0, r1
     fea:	d8 f7       	brcc	.-10     	; 0xfe2 <strnlen+0x2>
     fec:	80 95       	com	r24
     fee:	90 95       	com	r25
     ff0:	8e 0f       	add	r24, r30
     ff2:	9f 1f       	adc	r25, r31
     ff4:	08 95       	ret

00000ff6 <fputc>:
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	fb 01       	movw	r30, r22
    1000:	23 81       	ldd	r18, Z+3	; 0x03
    1002:	21 fd       	sbrc	r18, 1
    1004:	03 c0       	rjmp	.+6      	; 0x100c <fputc+0x16>
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	9f ef       	ldi	r25, 0xFF	; 255
    100a:	28 c0       	rjmp	.+80     	; 0x105c <fputc+0x66>
    100c:	22 ff       	sbrs	r18, 2
    100e:	16 c0       	rjmp	.+44     	; 0x103c <fputc+0x46>
    1010:	46 81       	ldd	r20, Z+6	; 0x06
    1012:	57 81       	ldd	r21, Z+7	; 0x07
    1014:	24 81       	ldd	r18, Z+4	; 0x04
    1016:	35 81       	ldd	r19, Z+5	; 0x05
    1018:	42 17       	cp	r20, r18
    101a:	53 07       	cpc	r21, r19
    101c:	44 f4       	brge	.+16     	; 0x102e <fputc+0x38>
    101e:	a0 81       	ld	r26, Z
    1020:	b1 81       	ldd	r27, Z+1	; 0x01
    1022:	9d 01       	movw	r18, r26
    1024:	2f 5f       	subi	r18, 0xFF	; 255
    1026:	3f 4f       	sbci	r19, 0xFF	; 255
    1028:	31 83       	std	Z+1, r19	; 0x01
    102a:	20 83       	st	Z, r18
    102c:	8c 93       	st	X, r24
    102e:	26 81       	ldd	r18, Z+6	; 0x06
    1030:	37 81       	ldd	r19, Z+7	; 0x07
    1032:	2f 5f       	subi	r18, 0xFF	; 255
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
    1036:	37 83       	std	Z+7, r19	; 0x07
    1038:	26 83       	std	Z+6, r18	; 0x06
    103a:	10 c0       	rjmp	.+32     	; 0x105c <fputc+0x66>
    103c:	eb 01       	movw	r28, r22
    103e:	09 2f       	mov	r16, r25
    1040:	18 2f       	mov	r17, r24
    1042:	00 84       	ldd	r0, Z+8	; 0x08
    1044:	f1 85       	ldd	r31, Z+9	; 0x09
    1046:	e0 2d       	mov	r30, r0
    1048:	09 95       	icall
    104a:	89 2b       	or	r24, r25
    104c:	e1 f6       	brne	.-72     	; 0x1006 <fputc+0x10>
    104e:	8e 81       	ldd	r24, Y+6	; 0x06
    1050:	9f 81       	ldd	r25, Y+7	; 0x07
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	9f 83       	std	Y+7, r25	; 0x07
    1056:	8e 83       	std	Y+6, r24	; 0x06
    1058:	81 2f       	mov	r24, r17
    105a:	90 2f       	mov	r25, r16
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	08 95       	ret

00001066 <__ultoa_invert>:
    1066:	fa 01       	movw	r30, r20
    1068:	aa 27       	eor	r26, r26
    106a:	28 30       	cpi	r18, 0x08	; 8
    106c:	51 f1       	breq	.+84     	; 0x10c2 <__ultoa_invert+0x5c>
    106e:	20 31       	cpi	r18, 0x10	; 16
    1070:	81 f1       	breq	.+96     	; 0x10d2 <__ultoa_invert+0x6c>
    1072:	e8 94       	clt
    1074:	6f 93       	push	r22
    1076:	6e 7f       	andi	r22, 0xFE	; 254
    1078:	6e 5f       	subi	r22, 0xFE	; 254
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	8f 4f       	sbci	r24, 0xFF	; 255
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	af 4f       	sbci	r26, 0xFF	; 255
    1082:	b1 e0       	ldi	r27, 0x01	; 1
    1084:	3e d0       	rcall	.+124    	; 0x1102 <__ultoa_invert+0x9c>
    1086:	b4 e0       	ldi	r27, 0x04	; 4
    1088:	3c d0       	rcall	.+120    	; 0x1102 <__ultoa_invert+0x9c>
    108a:	67 0f       	add	r22, r23
    108c:	78 1f       	adc	r23, r24
    108e:	89 1f       	adc	r24, r25
    1090:	9a 1f       	adc	r25, r26
    1092:	a1 1d       	adc	r26, r1
    1094:	68 0f       	add	r22, r24
    1096:	79 1f       	adc	r23, r25
    1098:	8a 1f       	adc	r24, r26
    109a:	91 1d       	adc	r25, r1
    109c:	a1 1d       	adc	r26, r1
    109e:	6a 0f       	add	r22, r26
    10a0:	71 1d       	adc	r23, r1
    10a2:	81 1d       	adc	r24, r1
    10a4:	91 1d       	adc	r25, r1
    10a6:	a1 1d       	adc	r26, r1
    10a8:	20 d0       	rcall	.+64     	; 0x10ea <__ultoa_invert+0x84>
    10aa:	09 f4       	brne	.+2      	; 0x10ae <__ultoa_invert+0x48>
    10ac:	68 94       	set
    10ae:	3f 91       	pop	r19
    10b0:	2a e0       	ldi	r18, 0x0A	; 10
    10b2:	26 9f       	mul	r18, r22
    10b4:	11 24       	eor	r1, r1
    10b6:	30 19       	sub	r19, r0
    10b8:	30 5d       	subi	r19, 0xD0	; 208
    10ba:	31 93       	st	Z+, r19
    10bc:	de f6       	brtc	.-74     	; 0x1074 <__ultoa_invert+0xe>
    10be:	cf 01       	movw	r24, r30
    10c0:	08 95       	ret
    10c2:	46 2f       	mov	r20, r22
    10c4:	47 70       	andi	r20, 0x07	; 7
    10c6:	40 5d       	subi	r20, 0xD0	; 208
    10c8:	41 93       	st	Z+, r20
    10ca:	b3 e0       	ldi	r27, 0x03	; 3
    10cc:	0f d0       	rcall	.+30     	; 0x10ec <__ultoa_invert+0x86>
    10ce:	c9 f7       	brne	.-14     	; 0x10c2 <__ultoa_invert+0x5c>
    10d0:	f6 cf       	rjmp	.-20     	; 0x10be <__ultoa_invert+0x58>
    10d2:	46 2f       	mov	r20, r22
    10d4:	4f 70       	andi	r20, 0x0F	; 15
    10d6:	40 5d       	subi	r20, 0xD0	; 208
    10d8:	4a 33       	cpi	r20, 0x3A	; 58
    10da:	18 f0       	brcs	.+6      	; 0x10e2 <__ultoa_invert+0x7c>
    10dc:	49 5d       	subi	r20, 0xD9	; 217
    10de:	31 fd       	sbrc	r19, 1
    10e0:	40 52       	subi	r20, 0x20	; 32
    10e2:	41 93       	st	Z+, r20
    10e4:	02 d0       	rcall	.+4      	; 0x10ea <__ultoa_invert+0x84>
    10e6:	a9 f7       	brne	.-22     	; 0x10d2 <__ultoa_invert+0x6c>
    10e8:	ea cf       	rjmp	.-44     	; 0x10be <__ultoa_invert+0x58>
    10ea:	b4 e0       	ldi	r27, 0x04	; 4
    10ec:	a6 95       	lsr	r26
    10ee:	97 95       	ror	r25
    10f0:	87 95       	ror	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	ba 95       	dec	r27
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <__ultoa_invert+0x86>
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	61 05       	cpc	r22, r1
    10fe:	71 05       	cpc	r23, r1
    1100:	08 95       	ret
    1102:	9b 01       	movw	r18, r22
    1104:	ac 01       	movw	r20, r24
    1106:	0a 2e       	mov	r0, r26
    1108:	06 94       	lsr	r0
    110a:	57 95       	ror	r21
    110c:	47 95       	ror	r20
    110e:	37 95       	ror	r19
    1110:	27 95       	ror	r18
    1112:	ba 95       	dec	r27
    1114:	c9 f7       	brne	.-14     	; 0x1108 <__ultoa_invert+0xa2>
    1116:	62 0f       	add	r22, r18
    1118:	73 1f       	adc	r23, r19
    111a:	84 1f       	adc	r24, r20
    111c:	95 1f       	adc	r25, r21
    111e:	a0 1d       	adc	r26, r0
    1120:	08 95       	ret

00001122 <__prologue_saves__>:
    1122:	2f 92       	push	r2
    1124:	3f 92       	push	r3
    1126:	4f 92       	push	r4
    1128:	5f 92       	push	r5
    112a:	6f 92       	push	r6
    112c:	7f 92       	push	r7
    112e:	8f 92       	push	r8
    1130:	9f 92       	push	r9
    1132:	af 92       	push	r10
    1134:	bf 92       	push	r11
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	ca 1b       	sub	r28, r26
    114c:	db 0b       	sbc	r29, r27
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	09 94       	ijmp

0000115a <__epilogue_restores__>:
    115a:	2a 88       	ldd	r2, Y+18	; 0x12
    115c:	39 88       	ldd	r3, Y+17	; 0x11
    115e:	48 88       	ldd	r4, Y+16	; 0x10
    1160:	5f 84       	ldd	r5, Y+15	; 0x0f
    1162:	6e 84       	ldd	r6, Y+14	; 0x0e
    1164:	7d 84       	ldd	r7, Y+13	; 0x0d
    1166:	8c 84       	ldd	r8, Y+12	; 0x0c
    1168:	9b 84       	ldd	r9, Y+11	; 0x0b
    116a:	aa 84       	ldd	r10, Y+10	; 0x0a
    116c:	b9 84       	ldd	r11, Y+9	; 0x09
    116e:	c8 84       	ldd	r12, Y+8	; 0x08
    1170:	df 80       	ldd	r13, Y+7	; 0x07
    1172:	ee 80       	ldd	r14, Y+6	; 0x06
    1174:	fd 80       	ldd	r15, Y+5	; 0x05
    1176:	0c 81       	ldd	r16, Y+4	; 0x04
    1178:	1b 81       	ldd	r17, Y+3	; 0x03
    117a:	aa 81       	ldd	r26, Y+2	; 0x02
    117c:	b9 81       	ldd	r27, Y+1	; 0x01
    117e:	ce 0f       	add	r28, r30
    1180:	d1 1d       	adc	r29, r1
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	ed 01       	movw	r28, r26
    118e:	08 95       	ret

00001190 <_exit>:
    1190:	f8 94       	cli

00001192 <__stop_program>:
    1192:	ff cf       	rjmp	.-2      	; 0x1192 <__stop_program>
